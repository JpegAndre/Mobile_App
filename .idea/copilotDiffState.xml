<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="CopilotDiffPersistence">
    <option name="pendingDiffs">
      <map>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/example/tripbuddy/DatabaseHelper.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/example/tripbuddy/DatabaseHelper.java" />
              <option name="originalContent" value="package com.example.tripbuddy;&#10;&#10;import android.content.Context;&#10;import android.content.ContentValues;&#10;import android.database.Cursor;&#10;import android.database.sqlite.SQLiteDatabase;&#10;import android.database.sqlite.SQLiteOpenHelper;&#10;&#10;import java.util.ArrayList;&#10;import java.util.List;&#10;&#10;public class DatabaseHelper extends SQLiteOpenHelper {&#10;&#10;    private static final String DATABASE_NAME = &quot;tripbuddy.db&quot;;&#10;    private static final int DATABASE_VERSION = 6;&#10;&#10;    public static final String TABLE_USERS = &quot;users&quot;;&#10;    public static final String COLUMN_EMAIL = &quot;email&quot;;&#10;    public static final String COLUMN_PASSWORD = &quot;password&quot;;&#10;    public static final String COLUMN_PHONE = &quot;phone&quot;;&#10;    public static final String COLUMN_AGE = &quot;age&quot;;&#10;&#10;    public static final String TABLE_TRIPS = &quot;trips&quot;;&#10;    public static final String COLUMN_TRIP_ID = &quot;trip_id&quot;;&#10;    public static final String COLUMN_TRIP_DESTINATION = &quot;trip_destination&quot;;&#10;    public static final String COLUMN_TRIP_START_DATE = &quot;trip_start_date&quot;;&#10;    public static final String COLUMN_TRIP_END_DATE = &quot;trip_end_date&quot;;&#10;    public static final String COLUMN_TRIP_ACTIVITIES = &quot;trip_activities&quot;;&#10;    public static final String COLUMN_TRIP_TRAVEL_EXPENSES = &quot;trip_travel_expenses&quot;;&#10;    public static final String COLUMN_TRIP_NOTES = &quot;trip_notes&quot;;&#10;    public static final String COLUMN_TRIP_CUSTOM_EXPENSES = &quot;trip_custom_expenses&quot;;&#10;    public static final String COLUMN_TRIP_MEAL_EXPENSES = &quot;trip_meal_expenses&quot;;&#10;    public static final String COLUMN_TRIP_EMAIL = &quot;email&quot;; // Foreign key&#10;&#10;    public static final String TABLE_MEMORIES = &quot;memories&quot;;&#10;    public static final String COLUMN_MEMORY_ID = &quot;memory_id&quot;;&#10;    public static final String COLUMN_MEMORY_TITLE = &quot;memory_title&quot;;&#10;    public static final String COLUMN_MEMORY_DESCRIPTION = &quot;memory_description&quot;;&#10;    public static final String COLUMN_MEMORY_DATE = &quot;memory_date&quot;;&#10;    public static final String COLUMN_MEMORY_IMAGE_URI = &quot;memory_image_uri&quot;;&#10;    public static final String COLUMN_MEMORY_SONG_URI = &quot;memory_song_uri&quot;;&#10;    public static final String COLUMN_MEMORY_EMAIL = &quot;email&quot;; // Foreign key&#10;&#10;    private static final String TABLE_CREATE_USERS =&#10;            &quot;CREATE TABLE &quot; + TABLE_USERS + &quot; (&quot; +&#10;                    COLUMN_EMAIL + &quot; TEXT PRIMARY KEY, &quot; +&#10;                    COLUMN_PASSWORD + &quot; TEXT, &quot; +&#10;                    COLUMN_PHONE + &quot; TEXT, &quot; +&#10;                    COLUMN_AGE + &quot; INTEGER);&quot;;&#10;&#10;    private static final String TABLE_CREATE_TRIPS =&#10;            &quot;CREATE TABLE &quot; + TABLE_TRIPS + &quot; (&quot; +&#10;                    COLUMN_TRIP_ID + &quot; INTEGER PRIMARY KEY AUTOINCREMENT, &quot; +&#10;                    COLUMN_TRIP_DESTINATION + &quot; TEXT, &quot; +&#10;                    COLUMN_TRIP_START_DATE + &quot; TEXT, &quot; +&#10;                    COLUMN_TRIP_END_DATE + &quot; TEXT, &quot; +&#10;                    COLUMN_TRIP_ACTIVITIES + &quot; TEXT, &quot; +&#10;                    COLUMN_TRIP_TRAVEL_EXPENSES + &quot; REAL, &quot; +&#10;                    COLUMN_TRIP_CUSTOM_EXPENSES + &quot; REAL, &quot; +&#10;                    COLUMN_TRIP_MEAL_EXPENSES + &quot; REAL, &quot; +&#10;                    COLUMN_TRIP_NOTES + &quot; TEXT, &quot; +&#10;                    COLUMN_TRIP_EMAIL + &quot; TEXT, &quot; +&#10;                    &quot;FOREIGN KEY(&quot; + COLUMN_TRIP_EMAIL + &quot;) REFERENCES &quot; + TABLE_USERS + &quot;(&quot; + COLUMN_EMAIL + &quot;) ON DELETE CASCADE);&quot;;&#10;&#10;    private static final String TABLE_CREATE_MEMORIES =&#10;            &quot;CREATE TABLE &quot; + TABLE_MEMORIES + &quot; (&quot; +&#10;                    COLUMN_MEMORY_ID + &quot; INTEGER PRIMARY KEY AUTOINCREMENT, &quot; +&#10;                    COLUMN_MEMORY_TITLE + &quot; TEXT, &quot; +&#10;                    COLUMN_MEMORY_DESCRIPTION + &quot; TEXT, &quot; +&#10;                    COLUMN_MEMORY_DATE + &quot; TEXT, &quot; +&#10;                    COLUMN_MEMORY_IMAGE_URI + &quot; TEXT, &quot; +&#10;                    COLUMN_MEMORY_SONG_URI + &quot; TEXT, &quot; +&#10;                    COLUMN_MEMORY_EMAIL + &quot; TEXT, &quot; +&#10;                    &quot;FOREIGN KEY(&quot; + COLUMN_MEMORY_EMAIL + &quot;) REFERENCES &quot; + TABLE_USERS + &quot;(&quot; + COLUMN_EMAIL + &quot;) ON DELETE CASCADE);&quot;;&#10;&#10;    public DatabaseHelper(Context context) {&#10;        super(context, DATABASE_NAME, null, DATABASE_VERSION);&#10;    }&#10;&#10;    @Override&#10;    public void onCreate(SQLiteDatabase db) {&#10;        db.execSQL(TABLE_CREATE_USERS);&#10;        db.execSQL(TABLE_CREATE_TRIPS);&#10;        db.execSQL(TABLE_CREATE_MEMORIES);&#10;    }&#10;&#10;    @Override&#10;    public void onUpgrade(SQLiteDatabase db, int oldVersion, int newVersion) {&#10;        db.execSQL(&quot;DROP TABLE IF EXISTS &quot; + TABLE_MEMORIES);&#10;        db.execSQL(&quot;DROP TABLE IF EXISTS &quot; + TABLE_TRIPS);&#10;        db.execSQL(&quot;DROP TABLE IF EXISTS &quot; + TABLE_USERS);&#10;        onCreate(db);&#10;    }&#10;&#10;    // Add a user&#10;    public long addUser(String email, String password, String phone, int age) {&#10;        SQLiteDatabase db = this.getWritableDatabase();&#10;        ContentValues values = new ContentValues();&#10;        values.put(COLUMN_EMAIL, email);&#10;        values.put(COLUMN_PASSWORD, password);&#10;        values.put(COLUMN_PHONE, phone);&#10;        values.put(COLUMN_AGE, age);&#10;        return db.insert(TABLE_USERS, null, values);&#10;    }&#10;&#10;    // Add a trip&#10;    public long addTrip(String destination, String startDate, String endDate, String activities, double travelExpenses, double customExpenses, double mealExpenses, String notes, String email) {&#10;        SQLiteDatabase db = this.getWritableDatabase();&#10;        ContentValues values = new ContentValues();&#10;        values.put(COLUMN_TRIP_DESTINATION, destination);&#10;        values.put(COLUMN_TRIP_START_DATE, startDate);&#10;        values.put(COLUMN_TRIP_END_DATE, endDate);&#10;        values.put(COLUMN_TRIP_ACTIVITIES, activities);&#10;        values.put(COLUMN_TRIP_TRAVEL_EXPENSES, travelExpenses);&#10;        values.put(COLUMN_TRIP_CUSTOM_EXPENSES, customExpenses);&#10;        values.put(COLUMN_TRIP_MEAL_EXPENSES, mealExpenses);&#10;        values.put(COLUMN_TRIP_NOTES, notes);&#10;        values.put(COLUMN_TRIP_EMAIL, email);&#10;        return db.insert(TABLE_TRIPS, null, values);&#10;    }&#10;&#10;    // Add a memory&#10;    public long addMemory(String title, String description, String date, String imageUri, String songUri, String email) {&#10;        SQLiteDatabase db = this.getWritableDatabase();&#10;        ContentValues values = new ContentValues();&#10;        values.put(COLUMN_MEMORY_TITLE, title);&#10;        values.put(COLUMN_MEMORY_DESCRIPTION, description);&#10;        values.put(COLUMN_MEMORY_DATE, date);&#10;        values.put(COLUMN_MEMORY_IMAGE_URI, imageUri);&#10;        values.put(COLUMN_MEMORY_SONG_URI, songUri);&#10;        values.put(COLUMN_MEMORY_EMAIL, email);&#10;        return db.insert(TABLE_MEMORIES, null, values);&#10;    }&#10;&#10;    // Check if user exists with email and password&#10;    public boolean checkUser(String email, String password) {&#10;        SQLiteDatabase db = this.getReadableDatabase();&#10;        String selection = COLUMN_EMAIL + &quot;=? AND &quot; + COLUMN_PASSWORD + &quot;=?&quot;;&#10;        String[] selectionArgs = { email, password };&#10;        Cursor cursor = db.query(TABLE_USERS, null, selection, selectionArgs, null, null, null);&#10;        boolean exists = cursor.getCount() &gt; 0;&#10;        cursor.close();&#10;        return exists;&#10;    }&#10;&#10;    // Get trip count for a user&#10;    public int getTripCountForUser(String email) {&#10;        SQLiteDatabase db = this.getReadableDatabase();&#10;        String selection = COLUMN_TRIP_EMAIL + &quot;=?&quot;;&#10;        String[] selectionArgs = { email };&#10;        Cursor cursor = db.query(TABLE_TRIPS, null, selection, selectionArgs, null, null, null);&#10;        int count = cursor.getCount();&#10;        cursor.close();&#10;        android.util.Log.d(&quot;DatabaseHelper&quot;, &quot;Trip count for &quot; + email + &quot;: &quot; + count);&#10;        return count;&#10;    }&#10;&#10;    // Debug method to insert test trip data&#10;    public void insertTestTrip() {&#10;        android.util.Log.d(&quot;DatabaseHelper&quot;, &quot;Inserting test trip data&quot;);&#10;        long result = addTrip(&#10;            &quot;Cape Town&quot;,&#10;            &quot;01/09/2025&quot;,&#10;            &quot;05/09/2025&quot;,&#10;            &quot;Hiking, Sightseeing&quot;,&#10;            1500.0,&#10;            500.0,&#10;            300.0,&#10;            &quot;Amazing mountain views&quot;,&#10;            &quot;andre.joubert99@gmail.com&quot;&#10;        );&#10;        android.util.Log.d(&quot;DatabaseHelper&quot;, &quot;Test trip inserted with ID: &quot; + result);&#10;    }&#10;&#10;    // Debug method to get all trips from database&#10;    public List&lt;android.database.Cursor&gt; getAllTripsDebug() {&#10;        SQLiteDatabase db = this.getReadableDatabase();&#10;        android.util.Log.d(&quot;DatabaseHelper&quot;, &quot;=== DATABASE DEBUG INFO ===&quot;);&#10;&#10;        // Check if trips table exists&#10;        Cursor tableCheck = db.rawQuery(&quot;SELECT name FROM sqlite_master WHERE type='table' AND name='&quot; + TABLE_TRIPS + &quot;'&quot;, null);&#10;        android.util.Log.d(&quot;DatabaseHelper&quot;, &quot;Trips table exists: &quot; + (tableCheck.getCount() &gt; 0));&#10;        tableCheck.close();&#10;&#10;        // Get all trips with raw query for debugging&#10;        Cursor cursor = db.rawQuery(&quot;SELECT * FROM &quot; + TABLE_TRIPS, null);&#10;        android.util.Log.d(&quot;DatabaseHelper&quot;, &quot;Total trips in database: &quot; + cursor.getCount());&#10;&#10;        if (cursor.moveToFirst()) {&#10;            do {&#10;                StringBuilder tripInfo = new StringBuilder(&quot;Trip: &quot;);&#10;                for (int i = 0; i &lt; cursor.getColumnCount(); i++) {&#10;                    tripInfo.append(cursor.getColumnName(i)).append(&quot;='&quot;)&#10;                           .append(cursor.getString(i)).append(&quot;' &quot;);&#10;                }&#10;                android.util.Log.d(&quot;DatabaseHelper&quot;, tripInfo.toString());&#10;            } while (cursor.moveToNext());&#10;        }&#10;        cursor.close();&#10;&#10;        return new ArrayList&lt;&gt;();&#10;    }&#10;}&#10;" />
              <option name="updatedContent" value="package com.example.tripbuddy;&#10;&#10;import android.content.Context;&#10;import android.content.ContentValues;&#10;import android.database.Cursor;&#10;import android.database.sqlite.SQLiteDatabase;&#10;import android.database.sqlite.SQLiteOpenHelper;&#10;&#10;import java.util.ArrayList;&#10;import java.util.List;&#10;&#10;public class DatabaseHelper extends SQLiteOpenHelper {&#10;&#10;    private static final String DATABASE_NAME = &quot;tripbuddy.db&quot;;&#10;    private static final int DATABASE_VERSION = 6;&#10;&#10;    public static final String TABLE_USERS = &quot;users&quot;;&#10;    public static final String COLUMN_EMAIL = &quot;email&quot;;&#10;    public static final String COLUMN_PASSWORD = &quot;password&quot;;&#10;    public static final String COLUMN_PHONE = &quot;phone&quot;;&#10;    public static final String COLUMN_AGE = &quot;age&quot;;&#10;&#10;    public static final String TABLE_TRIPS = &quot;trips&quot;;&#10;    public static final String COLUMN_TRIP_ID = &quot;trip_id&quot;;&#10;    public static final String COLUMN_TRIP_DESTINATION = &quot;trip_destination&quot;;&#10;    public static final String COLUMN_TRIP_START_DATE = &quot;trip_start_date&quot;;&#10;    public static final String COLUMN_TRIP_END_DATE = &quot;trip_end_date&quot;;&#10;    public static final String COLUMN_TRIP_ACTIVITIES = &quot;trip_activities&quot;;&#10;    public static final String COLUMN_TRIP_TRAVEL_EXPENSES = &quot;trip_travel_expenses&quot;;&#10;    public static final String COLUMN_TRIP_NOTES = &quot;trip_notes&quot;;&#10;    public static final String COLUMN_TRIP_CUSTOM_EXPENSES = &quot;trip_custom_expenses&quot;;&#10;    public static final String COLUMN_TRIP_MEAL_EXPENSES = &quot;trip_meal_expenses&quot;;&#10;    public static final String COLUMN_TRIP_EMAIL = &quot;email&quot;; // Foreign key&#10;&#10;    public static final String TABLE_MEMORIES = &quot;memories&quot;;&#10;    public static final String COLUMN_MEMORY_ID = &quot;memory_id&quot;;&#10;    public static final String COLUMN_MEMORY_TITLE = &quot;memory_title&quot;;&#10;    public static final String COLUMN_MEMORY_DESCRIPTION = &quot;memory_description&quot;;&#10;    public static final String COLUMN_MEMORY_DATE = &quot;memory_date&quot;;&#10;    public static final String COLUMN_MEMORY_IMAGE_URI = &quot;memory_image_uri&quot;;&#10;    public static final String COLUMN_MEMORY_SONG_URI = &quot;memory_song_uri&quot;;&#10;    public static final String COLUMN_MEMORY_EMAIL = &quot;email&quot;; // Foreign key&#10;&#10;    private static final String TABLE_CREATE_USERS =&#10;            &quot;CREATE TABLE &quot; + TABLE_USERS + &quot; (&quot; +&#10;                    COLUMN_EMAIL + &quot; TEXT PRIMARY KEY, &quot; +&#10;                    COLUMN_PASSWORD + &quot; TEXT, &quot; +&#10;                    COLUMN_PHONE + &quot; TEXT, &quot; +&#10;                    COLUMN_AGE + &quot; INTEGER);&quot;;&#10;&#10;    private static final String TABLE_CREATE_TRIPS =&#10;            &quot;CREATE TABLE &quot; + TABLE_TRIPS + &quot; (&quot; +&#10;                    COLUMN_TRIP_ID + &quot; INTEGER PRIMARY KEY AUTOINCREMENT, &quot; +&#10;                    COLUMN_TRIP_DESTINATION + &quot; TEXT, &quot; +&#10;                    COLUMN_TRIP_START_DATE + &quot; TEXT, &quot; +&#10;                    COLUMN_TRIP_END_DATE + &quot; TEXT, &quot; +&#10;                    COLUMN_TRIP_ACTIVITIES + &quot; TEXT, &quot; +&#10;                    COLUMN_TRIP_TRAVEL_EXPENSES + &quot; REAL, &quot; +&#10;                    COLUMN_TRIP_CUSTOM_EXPENSES + &quot; REAL, &quot; +&#10;                    COLUMN_TRIP_MEAL_EXPENSES + &quot; REAL, &quot; +&#10;                    COLUMN_TRIP_NOTES + &quot; TEXT, &quot; +&#10;                    COLUMN_TRIP_EMAIL + &quot; TEXT, &quot; +&#10;                    &quot;FOREIGN KEY(&quot; + COLUMN_TRIP_EMAIL + &quot;) REFERENCES &quot; + TABLE_USERS + &quot;(&quot; + COLUMN_EMAIL + &quot;) ON DELETE CASCADE);&quot;;&#10;&#10;    private static final String TABLE_CREATE_MEMORIES =&#10;            &quot;CREATE TABLE &quot; + TABLE_MEMORIES + &quot; (&quot; +&#10;                    COLUMN_MEMORY_ID + &quot; INTEGER PRIMARY KEY AUTOINCREMENT, &quot; +&#10;                    COLUMN_MEMORY_TITLE + &quot; TEXT, &quot; +&#10;                    COLUMN_MEMORY_DESCRIPTION + &quot; TEXT, &quot; +&#10;                    COLUMN_MEMORY_DATE + &quot; TEXT, &quot; +&#10;                    COLUMN_MEMORY_IMAGE_URI + &quot; TEXT, &quot; +&#10;                    COLUMN_MEMORY_SONG_URI + &quot; TEXT, &quot; +&#10;                    COLUMN_MEMORY_EMAIL + &quot; TEXT, &quot; +&#10;                    &quot;FOREIGN KEY(&quot; + COLUMN_MEMORY_EMAIL + &quot;) REFERENCES &quot; + TABLE_USERS + &quot;(&quot; + COLUMN_EMAIL + &quot;) ON DELETE CASCADE);&quot;;&#10;&#10;    public DatabaseHelper(Context context) {&#10;        super(context, DATABASE_NAME, null, DATABASE_VERSION);&#10;    }&#10;&#10;    @Override&#10;    public void onCreate(SQLiteDatabase db) {&#10;        db.execSQL(TABLE_CREATE_USERS);&#10;        db.execSQL(TABLE_CREATE_TRIPS);&#10;        db.execSQL(TABLE_CREATE_MEMORIES);&#10;    }&#10;&#10;    @Override&#10;    public void onUpgrade(SQLiteDatabase db, int oldVersion, int newVersion) {&#10;        db.execSQL(&quot;DROP TABLE IF EXISTS &quot; + TABLE_MEMORIES);&#10;        db.execSQL(&quot;DROP TABLE IF EXISTS &quot; + TABLE_TRIPS);&#10;        db.execSQL(&quot;DROP TABLE IF EXISTS &quot; + TABLE_USERS);&#10;        onCreate(db);&#10;    }&#10;&#10;    // Add a user&#10;    public long addUser(String email, String password, String phone, int age) {&#10;        SQLiteDatabase db = this.getWritableDatabase();&#10;        ContentValues values = new ContentValues();&#10;        values.put(COLUMN_EMAIL, email);&#10;        values.put(COLUMN_PASSWORD, password);&#10;        values.put(COLUMN_PHONE, phone);&#10;        values.put(COLUMN_AGE, age);&#10;        return db.insert(TABLE_USERS, null, values);&#10;    }&#10;&#10;    // Add a trip&#10;    public long addTrip(String destination, String startDate, String endDate, String activities, double travelExpenses, double customExpenses, double mealExpenses, String notes, String email) {&#10;        SQLiteDatabase db = this.getWritableDatabase();&#10;        ContentValues values = new ContentValues();&#10;        values.put(COLUMN_TRIP_DESTINATION, destination);&#10;        values.put(COLUMN_TRIP_START_DATE, startDate);&#10;        values.put(COLUMN_TRIP_END_DATE, endDate);&#10;        values.put(COLUMN_TRIP_ACTIVITIES, activities);&#10;        values.put(COLUMN_TRIP_TRAVEL_EXPENSES, travelExpenses);&#10;        values.put(COLUMN_TRIP_CUSTOM_EXPENSES, customExpenses);&#10;        values.put(COLUMN_TRIP_MEAL_EXPENSES, mealExpenses);&#10;        values.put(COLUMN_TRIP_NOTES, notes);&#10;        values.put(COLUMN_TRIP_EMAIL, email);&#10;        return db.insert(TABLE_TRIPS, null, values);&#10;    }&#10;&#10;    // Add a memory&#10;    public long addMemory(String title, String description, String date, String imageUri, String songUri, String email) {&#10;        SQLiteDatabase db = this.getWritableDatabase();&#10;        ContentValues values = new ContentValues();&#10;        values.put(COLUMN_MEMORY_TITLE, title);&#10;        values.put(COLUMN_MEMORY_DESCRIPTION, description);&#10;        values.put(COLUMN_MEMORY_DATE, date);&#10;        values.put(COLUMN_MEMORY_IMAGE_URI, imageUri);&#10;        values.put(COLUMN_MEMORY_SONG_URI, songUri);&#10;        values.put(COLUMN_MEMORY_EMAIL, email);&#10;        return db.insert(TABLE_MEMORIES, null, values);&#10;    }&#10;&#10;    // Check if user exists with email and password&#10;    public boolean checkUser(String email, String password) {&#10;        SQLiteDatabase db = this.getReadableDatabase();&#10;        String selection = COLUMN_EMAIL + &quot;=? AND &quot; + COLUMN_PASSWORD + &quot;=?&quot;;&#10;        String[] selectionArgs = { email, password };&#10;        Cursor cursor = db.query(TABLE_USERS, null, selection, selectionArgs, null, null, null);&#10;        boolean exists = cursor.getCount() &gt; 0;&#10;        cursor.close();&#10;        return exists;&#10;    }&#10;&#10;    // Get trip count for a user&#10;    public int getTripCountForUser(String email) {&#10;        SQLiteDatabase db = this.getReadableDatabase();&#10;        String selection = COLUMN_TRIP_EMAIL + &quot;=?&quot;;&#10;        String[] selectionArgs = { email };&#10;        Cursor cursor = db.query(TABLE_TRIPS, null, selection, selectionArgs, null, null, null);&#10;        int count = cursor.getCount();&#10;        cursor.close();&#10;        android.util.Log.d(&quot;DatabaseHelper&quot;, &quot;Trip count for &quot; + email + &quot;: &quot; + count);&#10;        return count;&#10;    }&#10;&#10;    // Debug method to insert test trip data&#10;    public void insertTestTrip() {&#10;        android.util.Log.d(&quot;DatabaseHelper&quot;, &quot;Inserting test trip data&quot;);&#10;        long result = addTrip(&#10;            &quot;Cape Town&quot;,&#10;            &quot;01/09/2025&quot;,&#10;            &quot;05/09/2025&quot;,&#10;            &quot;Hiking, Sightseeing&quot;,&#10;            1500.0,&#10;            500.0,&#10;            300.0,&#10;            &quot;Amazing mountain views&quot;,&#10;            &quot;andre.joubert99@gmail.com&quot;&#10;        );&#10;        android.util.Log.d(&quot;DatabaseHelper&quot;, &quot;Test trip inserted with ID: &quot; + result);&#10;    }&#10;&#10;    // Debug method to get all trips from database&#10;    public List&lt;android.database.Cursor&gt; getAllTripsDebug() {&#10;        SQLiteDatabase db = this.getReadableDatabase();&#10;        android.util.Log.d(&quot;DatabaseHelper&quot;, &quot;=== DATABASE DEBUG INFO ===&quot;);&#10;&#10;        // Check if trips table exists&#10;        Cursor tableCheck = db.rawQuery(&quot;SELECT name FROM sqlite_master WHERE type='table' AND name='&quot; + TABLE_TRIPS + &quot;'&quot;, null);&#10;        android.util.Log.d(&quot;DatabaseHelper&quot;, &quot;Trips table exists: &quot; + (tableCheck.getCount() &gt; 0));&#10;        tableCheck.close();&#10;&#10;        // Get all trips with raw query for debugging&#10;        Cursor cursor = db.rawQuery(&quot;SELECT * FROM &quot; + TABLE_TRIPS, null);&#10;        android.util.Log.d(&quot;DatabaseHelper&quot;, &quot;Total trips in database: &quot; + cursor.getCount());&#10;&#10;        if (cursor.moveToFirst()) {&#10;            do {&#10;                StringBuilder tripInfo = new StringBuilder(&quot;Trip: &quot;);&#10;                for (int i = 0; i &lt; cursor.getColumnCount(); i++) {&#10;                    tripInfo.append(cursor.getColumnName(i)).append(&quot;='&quot;)&#10;                           .append(cursor.getString(i)).append(&quot;' &quot;);&#10;                }&#10;                android.util.Log.d(&quot;DatabaseHelper&quot;, tripInfo.toString());&#10;            } while (cursor.moveToNext());&#10;        }&#10;        cursor.close();&#10;&#10;        return new ArrayList&lt;&gt;();&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/example/tripbuddy/Trips.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/example/tripbuddy/Trips.java" />
              <option name="originalContent" value="package com.example.tripbuddy;&#10;&#10;import android.content.Intent;&#10;import android.content.SharedPreferences;&#10;import android.os.Bundle;&#10;import android.view.View;&#10;import android.widget.Button;&#10;import android.widget.TextView;&#10;&#10;import androidx.activity.EdgeToEdge;&#10;import androidx.appcompat.app.AppCompatActivity;&#10;import androidx.core.graphics.Insets;&#10;import androidx.core.view.ViewCompat;&#10;import androidx.core.view.WindowInsetsCompat;&#10;import androidx.recyclerview.widget.LinearLayoutManager;&#10;import androidx.recyclerview.widget.RecyclerView;&#10;&#10;import com.example.tripbuddy.adapter.TripAdapter;&#10;import com.example.tripbuddy.model.Trip;&#10;&#10;import java.util.ArrayList;&#10;import java.util.List;&#10;&#10;public class Trips extends AppCompatActivity {&#10;&#10;    private RecyclerView recyclerTrips;&#10;&#10;    private Button btnBack, btnDebugShowAll, btnDebugInsertTest;&#10;    private TextView textNoTrips;&#10;    private TripAdapter tripAdapter;&#10;    private List&lt;Trip&gt; tripList = new ArrayList&lt;&gt;();&#10;&#10;    @Override&#10;    protected void onCreate(Bundle savedInstanceState) {&#10;        super.onCreate(savedInstanceState);&#10;        EdgeToEdge.enable(this);&#10;        setContentView(R.layout.activity_trips);&#10;        ViewCompat.setOnApplyWindowInsetsListener(findViewById(R.id.main), (v, insets) -&gt; {&#10;            Insets systemBars = insets.getInsets(WindowInsetsCompat.Type.systemBars());&#10;            v.setPadding(systemBars.left, systemBars.top, systemBars.right, systemBars.bottom);&#10;            return insets;&#10;        });&#10;&#10;        recyclerTrips = findViewById(R.id.recyclerTrips);&#10;        textNoTrips = findViewById(R.id.textNoTrips);&#10;        btnBack = findViewById(R.id.btnBack);&#10;        btnDebugShowAll = findViewById(R.id.btnDebugShowAll);&#10;        btnDebugInsertTest = findViewById(R.id.btnDebugInsertTest);&#10;        recyclerTrips.setLayoutManager(new LinearLayoutManager(this));&#10;&#10;        SharedPreferences prefs = getSharedPreferences(MainActivity.SHARED_PREFS, MODE_PRIVATE);&#10;        String userEmail = prefs.getString(MainActivity.KEY_EMAIL, &quot;&quot;);&#10;&#10;        // Debug logging - let's see what's actually in SharedPreferences&#10;        android.util.Log.d(&quot;TripsActivity&quot;, &quot;=== DEBUGGING TRIPS ISSUE ===&quot;);&#10;        android.util.Log.d(&quot;TripsActivity&quot;, &quot;SHARED_PREFS constant: &quot; + MainActivity.SHARED_PREFS);&#10;        android.util.Log.d(&quot;TripsActivity&quot;, &quot;KEY_EMAIL constant: &quot; + MainActivity.KEY_EMAIL);&#10;        android.util.Log.d(&quot;TripsActivity&quot;, &quot;Retrieved user email: '&quot; + userEmail + &quot;'&quot;);&#10;        android.util.Log.d(&quot;TripsActivity&quot;, &quot;Email length: &quot; + userEmail.length());&#10;        android.util.Log.d(&quot;TripsActivity&quot;, &quot;Email is empty: &quot; + userEmail.isEmpty());&#10;        &#10;        // Let's also check all SharedPreferences contents&#10;        java.util.Map&lt;String, ?&gt; allPrefs = prefs.getAll();&#10;        android.util.Log.d(&quot;TripsActivity&quot;, &quot;All SharedPreferences contents:&quot;);&#10;        for (java.util.Map.Entry&lt;String, ?&gt; entry : allPrefs.entrySet()) {&#10;            android.util.Log.d(&quot;TripsActivity&quot;, &quot;  &quot; + entry.getKey() + &quot; = &quot; + entry.getValue());&#10;        }&#10;&#10;        // Debug: Get all trips first to see what's in the database&#10;        List&lt;Trip&gt; allTrips = Trip.getAllTrips(this);&#10;        android.util.Log.d(&quot;TripsActivity&quot;, &quot;Total trips in database: &quot; + allTrips.size());&#10;        &#10;        // Call database debugging method to examine raw database contents&#10;        DatabaseHelper dbHelper = new DatabaseHelper(this);&#10;        dbHelper.getAllTripsDebug();&#10;&#10;        tripList = Trip.getTripsForUser(this, userEmail);&#10;&#10;        // Debug logging&#10;        android.util.Log.d(&quot;TripsActivity&quot;, &quot;Number of trips found: &quot; + tripList.size());&#10;        for (int i = 0; i &lt; tripList.size(); i++) {&#10;            Trip trip = tripList.get(i);&#10;            android.util.Log.d(&quot;TripsActivity&quot;, &quot;Trip &quot; + i + &quot;: &quot; + trip.destination + &quot; from &quot; + trip.startDate + &quot; to &quot; + trip.endDate);&#10;        }&#10;&#10;        tripAdapter = new TripAdapter(tripList);&#10;        recyclerTrips.setAdapter(tripAdapter);&#10;&#10;        if (tripList.isEmpty()) {&#10;            textNoTrips.setVisibility(View.VISIBLE);&#10;            textNoTrips.setText(&quot;No trips found for: &quot; + userEmail);&#10;            recyclerTrips.setVisibility(View.GONE);&#10;        } else {&#10;            textNoTrips.setVisibility(View.GONE);&#10;            recyclerTrips.setVisibility(View.VISIBLE);&#10;        }&#10;&#10;        btnBack.setOnClickListener(new View.OnClickListener() {&#10;            @Override&#10;            public void onClick(View v) {&#10;                startActivity(new Intent(Trips.this, HomeActivity.class));&#10;            }&#10;        });&#10;&#10;        btnDebugShowAll.setOnClickListener(new View.OnClickListener() {&#10;            @Override&#10;            public void onClick(View v) {&#10;                // Show all trips regardless of user for debugging&#10;                List&lt;Trip&gt; allTrips = Trip.getAllTrips(Trips.this);&#10;                android.util.Log.d(&quot;TripsActivity&quot;, &quot;Debug button clicked - found &quot; + allTrips.size() + &quot; total trips&quot;);&#10;&#10;                tripList.clear();&#10;                tripList.addAll(allTrips);&#10;                tripAdapter.notifyDataSetChanged();&#10;&#10;                if (allTrips.isEmpty()) {&#10;                    textNoTrips.setVisibility(View.VISIBLE);&#10;                    textNoTrips.setText(&quot;No trips in database at all!&quot;);&#10;                    recyclerTrips.setVisibility(View.GONE);&#10;                } else {&#10;                    textNoTrips.setVisibility(View.GONE);&#10;                    recyclerTrips.setVisibility(View.VISIBLE);&#10;                }&#10;            }&#10;        });&#10;&#10;        btnDebugInsertTest.setOnClickListener(new View.OnClickListener() {&#10;            @Override&#10;            public void onClick(View v) {&#10;                // Insert test trip data directly into database&#10;                DatabaseHelper dbHelper = new DatabaseHelper(Trips.this);&#10;                dbHelper.insertTestTrip();&#10;                &#10;                // Also examine database contents after insertion&#10;                dbHelper.getAllTripsDebug();&#10;                &#10;                // Refresh the display&#10;                List&lt;Trip&gt; allTrips = Trip.getAllTrips(Trips.this);&#10;                android.util.Log.d(&quot;TripsActivity&quot;, &quot;After test insert - found &quot; + allTrips.size() + &quot; total trips&quot;);&#10;                &#10;                tripList.clear();&#10;                tripList.addAll(allTrips);&#10;                tripAdapter.notifyDataSetChanged();&#10;                &#10;                if (allTrips.isEmpty()) {&#10;                    textNoTrips.setVisibility(View.VISIBLE);&#10;                    textNoTrips.setText(&quot;Still no trips after insert!&quot;);&#10;                    recyclerTrips.setVisibility(View.GONE);&#10;                } else {&#10;                    textNoTrips.setVisibility(View.GONE);&#10;                    recyclerTrips.setVisibility(View.VISIBLE);&#10;                }&#10;                &#10;                android.widget.Toast.makeText(Trips.this, &quot;Test trip inserted! Check logs for details.&quot;, android.widget.Toast.LENGTH_LONG).show();&#10;            }&#10;        });&#10;    }&#10;}" />
              <option name="updatedContent" value="package com.example.tripbuddy;&#10;&#10;import android.content.Intent;&#10;import android.content.SharedPreferences;&#10;import android.os.Bundle;&#10;import android.view.View;&#10;import android.widget.Button;&#10;import android.widget.TextView;&#10;&#10;import androidx.activity.EdgeToEdge;&#10;import androidx.appcompat.app.AppCompatActivity;&#10;import androidx.core.graphics.Insets;&#10;import androidx.core.view.ViewCompat;&#10;import androidx.core.view.WindowInsetsCompat;&#10;import androidx.recyclerview.widget.LinearLayoutManager;&#10;import androidx.recyclerview.widget.RecyclerView;&#10;&#10;import com.example.tripbuddy.adapter.TripAdapter;&#10;import com.example.tripbuddy.model.Trip;&#10;&#10;import java.util.ArrayList;&#10;import java.util.List;&#10;&#10;public class Trips extends AppCompatActivity {&#10;&#10;    private RecyclerView recyclerTrips;&#10;&#10;    private Button btnBack, btnDebugShowAll, btnDebugInsertTest;&#10;    private TextView textNoTrips;&#10;    private TripAdapter tripAdapter;&#10;    private List&lt;Trip&gt; tripList = new ArrayList&lt;&gt;();&#10;&#10;    @Override&#10;    protected void onCreate(Bundle savedInstanceState) {&#10;        super.onCreate(savedInstanceState);&#10;        EdgeToEdge.enable(this);&#10;        setContentView(R.layout.activity_trips);&#10;        ViewCompat.setOnApplyWindowInsetsListener(findViewById(R.id.main), (v, insets) -&gt; {&#10;            Insets systemBars = insets.getInsets(WindowInsetsCompat.Type.systemBars());&#10;            v.setPadding(systemBars.left, systemBars.top, systemBars.right, systemBars.bottom);&#10;            return insets;&#10;        });&#10;&#10;        recyclerTrips = findViewById(R.id.recyclerTrips);&#10;        textNoTrips = findViewById(R.id.textNoTrips);&#10;        btnBack = findViewById(R.id.btnBack);&#10;        btnDebugShowAll = findViewById(R.id.btnDebugShowAll);&#10;        btnDebugInsertTest = findViewById(R.id.btnDebugInsertTest);&#10;        recyclerTrips.setLayoutManager(new LinearLayoutManager(this));&#10;&#10;        SharedPreferences prefs = getSharedPreferences(MainActivity.SHARED_PREFS, MODE_PRIVATE);&#10;        String userEmail = prefs.getString(MainActivity.KEY_EMAIL, &quot;&quot;);&#10;&#10;        // Debug logging - let's see what's actually in SharedPreferences&#10;        android.util.Log.d(&quot;TripsActivity&quot;, &quot;=== DEBUGGING TRIPS ISSUE ===&quot;);&#10;        android.util.Log.d(&quot;TripsActivity&quot;, &quot;SHARED_PREFS constant: &quot; + MainActivity.SHARED_PREFS);&#10;        android.util.Log.d(&quot;TripsActivity&quot;, &quot;KEY_EMAIL constant: &quot; + MainActivity.KEY_EMAIL);&#10;        android.util.Log.d(&quot;TripsActivity&quot;, &quot;Retrieved user email: '&quot; + userEmail + &quot;'&quot;);&#10;        android.util.Log.d(&quot;TripsActivity&quot;, &quot;Email length: &quot; + userEmail.length());&#10;        android.util.Log.d(&quot;TripsActivity&quot;, &quot;Email is empty: &quot; + userEmail.isEmpty());&#10;        &#10;        // Let's also check all SharedPreferences contents&#10;        java.util.Map&lt;String, ?&gt; allPrefs = prefs.getAll();&#10;        android.util.Log.d(&quot;TripsActivity&quot;, &quot;All SharedPreferences contents:&quot;);&#10;        for (java.util.Map.Entry&lt;String, ?&gt; entry : allPrefs.entrySet()) {&#10;            android.util.Log.d(&quot;TripsActivity&quot;, &quot;  &quot; + entry.getKey() + &quot; = &quot; + entry.getValue());&#10;        }&#10;&#10;        // Debug: Get all trips first to see what's in the database&#10;        List&lt;Trip&gt; allTrips = Trip.getAllTrips(this);&#10;        android.util.Log.d(&quot;TripsActivity&quot;, &quot;Total trips in database: &quot; + allTrips.size());&#10;        &#10;        // Call database debugging method to examine raw database contents&#10;        DatabaseHelper dbHelper = new DatabaseHelper(this);&#10;        dbHelper.getAllTripsDebug();&#10;&#10;        tripList = Trip.getTripsForUser(this, userEmail);&#10;&#10;        // Debug logging&#10;        android.util.Log.d(&quot;TripsActivity&quot;, &quot;Number of trips found: &quot; + tripList.size());&#10;        for (int i = 0; i &lt; tripList.size(); i++) {&#10;            Trip trip = tripList.get(i);&#10;            android.util.Log.d(&quot;TripsActivity&quot;, &quot;Trip &quot; + i + &quot;: &quot; + trip.destination + &quot; from &quot; + trip.startDate + &quot; to &quot; + trip.endDate);&#10;        }&#10;&#10;        tripAdapter = new TripAdapter(tripList);&#10;        recyclerTrips.setAdapter(tripAdapter);&#10;&#10;        if (tripList.isEmpty()) {&#10;            textNoTrips.setVisibility(View.VISIBLE);&#10;            textNoTrips.setText(&quot;No trips found for: &quot; + userEmail);&#10;            recyclerTrips.setVisibility(View.GONE);&#10;        } else {&#10;            textNoTrips.setVisibility(View.GONE);&#10;            recyclerTrips.setVisibility(View.VISIBLE);&#10;        }&#10;&#10;        btnBack.setOnClickListener(new View.OnClickListener() {&#10;            @Override&#10;            public void onClick(View v) {&#10;                startActivity(new Intent(Trips.this, HomeActivity.class));&#10;            }&#10;        });&#10;&#10;        btnDebugShowAll.setOnClickListener(new View.OnClickListener() {&#10;            @Override&#10;            public void onClick(View v) {&#10;                // Show all trips regardless of user for debugging&#10;                List&lt;Trip&gt; allTrips = Trip.getAllTrips(Trips.this);&#10;                android.util.Log.d(&quot;TripsActivity&quot;, &quot;Debug button clicked - found &quot; + allTrips.size() + &quot; total trips&quot;);&#10;&#10;                tripList.clear();&#10;                tripList.addAll(allTrips);&#10;                tripAdapter.notifyDataSetChanged();&#10;&#10;                if (allTrips.isEmpty()) {&#10;                    textNoTrips.setVisibility(View.VISIBLE);&#10;                    textNoTrips.setText(&quot;No trips in database at all!&quot;);&#10;                    recyclerTrips.setVisibility(View.GONE);&#10;                } else {&#10;                    textNoTrips.setVisibility(View.GONE);&#10;                    recyclerTrips.setVisibility(View.VISIBLE);&#10;                }&#10;            }&#10;        });&#10;&#10;        btnDebugInsertTest.setOnClickListener(new View.OnClickListener() {&#10;            @Override&#10;            public void onClick(View v) {&#10;                // Insert test trip data directly into database&#10;                DatabaseHelper dbHelper = new DatabaseHelper(Trips.this);&#10;                dbHelper.insertTestTrip();&#10;                &#10;                // Also examine database contents after insertion&#10;                dbHelper.getAllTripsDebug();&#10;                &#10;                // Refresh the display&#10;                List&lt;Trip&gt; allTrips = Trip.getAllTrips(Trips.this);&#10;                android.util.Log.d(&quot;TripsActivity&quot;, &quot;After test insert - found &quot; + allTrips.size() + &quot; total trips&quot;);&#10;                &#10;                tripList.clear();&#10;                tripList.addAll(allTrips);&#10;                tripAdapter.notifyDataSetChanged();&#10;                &#10;                if (allTrips.isEmpty()) {&#10;                    textNoTrips.setVisibility(View.VISIBLE);&#10;                    textNoTrips.setText(&quot;Still no trips after insert!&quot;);&#10;                    recyclerTrips.setVisibility(View.GONE);&#10;                } else {&#10;                    textNoTrips.setVisibility(View.GONE);&#10;                    recyclerTrips.setVisibility(View.VISIBLE);&#10;                }&#10;                &#10;                android.widget.Toast.makeText(Trips.this, &quot;Test trip inserted! Check logs for details.&quot;, android.widget.Toast.LENGTH_LONG).show();&#10;            }&#10;        });&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/example/tripbuddy/ui/memory/MemoryFragment.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/example/tripbuddy/ui/memory/MemoryFragment.java" />
              <option name="originalContent" value="package com.example.tripbuddy.ui.memory;&#10;&#10;import androidx.activity.result.ActivityResultLauncher;&#10;import androidx.activity.result.contract.ActivityResultContracts;&#10;import androidx.lifecycle.ViewModelProvider;&#10;&#10;import com.example.tripbuddy.DatabaseHelper;&#10;import com.example.tripbuddy.MainActivity;&#10;import com.example.tripbuddy.ui.memory.MemoryViewModel;&#10;import com.example.tripbuddy.R;&#10;import com.google.android.material.datepicker.MaterialDatePicker;&#10;import com.google.android.material.textfield.TextInputEditText;&#10;import com.google.android.material.textfield.TextInputLayout;&#10;&#10;import android.content.Intent;&#10;import android.content.SharedPreferences;&#10;import android.net.Uri;&#10;import android.os.Bundle;&#10;&#10;import androidx.annotation.NonNull;&#10;import androidx.annotation.Nullable;&#10;import androidx.fragment.app.Fragment;&#10;&#10;import android.provider.MediaStore;&#10;import android.view.LayoutInflater;&#10;import android.view.View;&#10;import android.view.ViewGroup;&#10;import android.widget.Button;&#10;import android.widget.EditText;&#10;import android.widget.TextView;&#10;import android.widget.Toast;&#10;&#10;import java.io.File;&#10;import java.io.FileOutputStream;&#10;import java.io.InputStream;&#10;import java.text.SimpleDateFormat;&#10;import java.util.Date;&#10;import java.util.Locale;&#10;import java.util.UUID;&#10;&#10;public class MemoryFragment extends Fragment {&#10;&#10;    private MemoryViewModel mViewModel;&#10;&#10;    private String title, description;&#10;&#10;    private SimpleDateFormat date;&#10;    private TextView txtImage, txtSong;&#10;&#10;    private TextInputEditText dateEditText, titleEditText, descriptionEditText;&#10;&#10;    private TextInputLayout dateInputLayout, locationInputLayout, descriptionInputLayout;&#10;&#10;    private Button imageButton, songButton, saveButton;&#10;&#10;    private Uri selectedImageUri, selectedSongUri;&#10;&#10;    private ActivityResultLauncher&lt;String&gt; imagePickerLauncher, songPickerLauncher;&#10;&#10;    public static MemoryFragment newInstance() {&#10;        return new MemoryFragment();&#10;    }&#10;&#10;    @Override&#10;    public View onCreateView(@NonNull LayoutInflater inflater, @Nullable ViewGroup container,&#10;                             @Nullable Bundle savedInstanceState) {&#10;        return inflater.inflate(R.layout.fragment_memory, container, false);&#10;    }&#10;&#10;    @Override&#10;    public void onViewCreated(@NonNull View view, @Nullable Bundle savedInstanceState) {&#10;        super.onViewCreated(view, savedInstanceState);&#10;&#10;        dateEditText = view.findViewById(R.id.edtDate);&#10;        titleEditText = view.findViewById(R.id.edtTitle);&#10;        descriptionEditText = view.findViewById(R.id.edtNotes);&#10;        dateInputLayout = view.findViewById(R.id.inputLayoutDate);&#10;        descriptionInputLayout = view.findViewById(R.id.inputLayoutDescription);&#10;        imageButton = view.findViewById(R.id.btnUploadImage);&#10;        songButton = view.findViewById(R.id.btnUploadSong);&#10;        saveButton = view.findViewById(R.id.btnSave);&#10;        txtImage = view.findViewById(R.id.textUploadImage);&#10;        txtSong = view.findViewById(R.id.textUploadSong);&#10;&#10;        txtImage.setVisibility(View.INVISIBLE);&#10;        txtSong.setVisibility(View.INVISIBLE);&#10;&#10;&#10;        dateEditText.setOnClickListener(v -&gt; {&#10;            MaterialDatePicker&lt;Long&gt; startDatePicker = MaterialDatePicker.Builder.datePicker()&#10;                    .setTitleText(&quot;Select memory date&quot;)&#10;                    .setSelection(MaterialDatePicker.todayInUtcMilliseconds())&#10;                    .build();&#10;            startDatePicker.show(getParentFragmentManager(), &quot;START_DATE_PICKER&quot;);&#10;            startDatePicker.addOnPositiveButtonClickListener(selection -&gt;&#10;                    dateEditText.setText(new SimpleDateFormat(&quot;dd/MM/yyyy&quot;, Locale.getDefault()).format(new Date((Long) selection)))&#10;            );&#10;            date = new SimpleDateFormat(&quot;dd/MM/yyyy&quot;, Locale.getDefault());&#10;        });&#10;&#10;&#10;        // Register image picker launcher&#10;        imagePickerLauncher = registerForActivityResult(&#10;            new ActivityResultContracts.GetContent(),&#10;            uri -&gt; {&#10;                if (uri != null) {&#10;                    selectedImageUri = uri;&#10;                    Toast.makeText(getActivity(), &quot;Image uploaded&quot;, Toast.LENGTH_SHORT).show();&#10;                }&#10;            }&#10;        );&#10;&#10;        imageButton.setOnClickListener(v -&gt; {&#10;            imagePickerLauncher.launch(&quot;image/*&quot;);&#10;            txtImage.setVisibility(View.VISIBLE);&#10;        });&#10;&#10;&#10;        // Register song picker launcher&#10;        songPickerLauncher = registerForActivityResult(&#10;            new ActivityResultContracts.GetContent(),&#10;            uri -&gt; {&#10;                if (uri != null) {&#10;                    selectedSongUri = uri;&#10;                    Toast.makeText(getActivity(), &quot;Song uploaded&quot;, Toast.LENGTH_SHORT).show();&#10;                }&#10;            }&#10;        );&#10;&#10;        songButton.setOnClickListener(v -&gt; {&#10;            songPickerLauncher.launch(&quot;audio/mpeg&quot;);&#10;            txtSong.setVisibility(View.VISIBLE);&#10;        });&#10;&#10;&#10;        saveButton.setOnClickListener(v -&gt; {&#10;            // Validate fields&#10;            title = titleEditText.getText().toString().trim();&#10;            description = descriptionEditText.getText().toString().trim();&#10;            String dateStr = dateEditText.getText().toString().trim();&#10;&#10;            boolean valid = true;&#10;&#10;            if (dateStr.isEmpty()) {&#10;                dateInputLayout.setError(&quot;Date is required&quot;);&#10;                valid = false;&#10;                return;&#10;            } else {&#10;                dateInputLayout.setError(null);&#10;            }&#10;&#10;            if (title.isEmpty()) {&#10;                titleEditText.setError(&quot;Title is required&quot;);&#10;                valid = false;&#10;                return;&#10;            } else {&#10;                titleEditText.setError(null);&#10;            }&#10;&#10;            if (description.isEmpty()) {&#10;                descriptionEditText.setError(&quot;Description is required&quot;);&#10;                valid = false;&#10;                return;&#10;            } else {&#10;                descriptionEditText.setError(null);&#10;            }&#10;&#10;            if (selectedImageUri == null) {&#10;                txtImage.setError(&quot;Image is required&quot;);&#10;                valid = false;&#10;                return;&#10;            } else {&#10;                txtImage.setError(null);&#10;            }&#10;&#10;            if (selectedSongUri == null) {&#10;                txtSong.setError(&quot;Song is required&quot;);&#10;                valid = false;&#10;                return;&#10;            } else {&#10;                txtSong.setError(null);&#10;            }&#10;&#10;            if (valid) {&#10;                // Copy files to internal storage&#10;                String savedImagePath = copyFileToInternalStorage(selectedImageUri, &quot;image_&quot;);&#10;                String savedSongPath = copyFileToInternalStorage(selectedSongUri, &quot;song_&quot;);&#10;&#10;                if (savedImagePath != null &amp;&amp; savedSongPath != null) {&#10;                    SharedPreferences prefs = getActivity().getSharedPreferences(MainActivity.SHARED_PREFS, getActivity().MODE_PRIVATE);&#10;                    String userEmail = prefs.getString(MainActivity.KEY_EMAIL, &quot;&quot;);&#10;&#10;                    DatabaseHelper dbHelper = new DatabaseHelper(getActivity());&#10;                    dbHelper.addMemory(title, description, dateStr, savedImagePath, savedSongPath, userEmail);&#10;                    Toast.makeText(getActivity(), &quot;Memory saved&quot;, Toast.LENGTH_SHORT).show();&#10;&#10;                    // Clear fields&#10;                    dateEditText.setText(&quot;&quot;);&#10;                    titleEditText.setText(&quot;&quot;);&#10;                    descriptionEditText.setText(&quot;&quot;);&#10;                    txtImage.setVisibility(View.INVISIBLE);&#10;                    txtSong.setVisibility(View.INVISIBLE);&#10;                    selectedImageUri = null;&#10;                    selectedSongUri = null;&#10;                } else {&#10;                    Toast.makeText(getActivity(), &quot;Error saving files. Please try again.&quot;, Toast.LENGTH_SHORT).show();&#10;                }&#10;            } else {&#10;                Toast.makeText(getActivity(), &quot;Please fill all fields&quot;, Toast.LENGTH_SHORT).show();&#10;            }&#10;        });  &#10;    }&#10;&#10;    private String copyFileToInternalStorage(Uri sourceUri, String prefix) {&#10;        try {&#10;            // Create a unique filename&#10;            String fileName = prefix + UUID.randomUUID().toString();&#10;&#10;            // Get the app's internal storage directory&#10;            File internalDir = new File(getActivity().getFilesDir(), &quot;memories&quot;);&#10;            if (!internalDir.exists()) {&#10;                internalDir.mkdirs();&#10;            }&#10;&#10;            File destFile = new File(internalDir, fileName);&#10;&#10;            // Copy the file&#10;            InputStream inputStream = getActivity().getContentResolver().openInputStream(sourceUri);&#10;            FileOutputStream outputStream = new FileOutputStream(destFile);&#10;&#10;            byte[] buffer = new byte[1024];&#10;            int length;&#10;            while ((length = inputStream.read(buffer)) &gt; 0) {&#10;                outputStream.write(buffer, 0, length);&#10;            }&#10;&#10;            outputStream.close();&#10;            inputStream.close();&#10;&#10;            android.util.Log.d(&quot;MemoryFragment&quot;, &quot;File saved to: &quot; + destFile.getAbsolutePath());&#10;            return destFile.getAbsolutePath();&#10;&#10;        } catch (Exception e) {&#10;            android.util.Log.e(&quot;MemoryFragment&quot;, &quot;Error copying file: &quot; + e.getMessage());&#10;            return null;&#10;        }&#10;    }&#10;}" />
              <option name="updatedContent" value="package com.example.tripbuddy.ui.memory;&#10;&#10;import androidx.activity.result.ActivityResultLauncher;&#10;import androidx.activity.result.contract.ActivityResultContracts;&#10;import androidx.lifecycle.ViewModelProvider;&#10;&#10;import com.example.tripbuddy.DatabaseHelper;&#10;import com.example.tripbuddy.MainActivity;&#10;import com.example.tripbuddy.ui.memory.MemoryViewModel;&#10;import com.example.tripbuddy.R;&#10;import com.google.android.material.datepicker.MaterialDatePicker;&#10;import com.google.android.material.textfield.TextInputEditText;&#10;import com.google.android.material.textfield.TextInputLayout;&#10;&#10;import android.content.Intent;&#10;import android.content.SharedPreferences;&#10;import android.net.Uri;&#10;import android.os.Bundle;&#10;&#10;import androidx.annotation.NonNull;&#10;import androidx.annotation.Nullable;&#10;import androidx.fragment.app.Fragment;&#10;&#10;import android.provider.MediaStore;&#10;import android.view.LayoutInflater;&#10;import android.view.View;&#10;import android.view.ViewGroup;&#10;import android.widget.Button;&#10;import android.widget.EditText;&#10;import android.widget.TextView;&#10;import android.widget.Toast;&#10;&#10;import java.io.File;&#10;import java.io.FileOutputStream;&#10;import java.io.InputStream;&#10;import java.text.SimpleDateFormat;&#10;import java.util.Date;&#10;import java.util.Locale;&#10;import java.util.UUID;&#10;&#10;public class MemoryFragment extends Fragment {&#10;&#10;    private MemoryViewModel mViewModel;&#10;&#10;    private String title, description;&#10;&#10;    private SimpleDateFormat date;&#10;    private TextView txtImage, txtSong;&#10;&#10;    private TextInputEditText dateEditText, titleEditText, descriptionEditText;&#10;&#10;    private TextInputLayout dateInputLayout, locationInputLayout, descriptionInputLayout;&#10;&#10;    private Button imageButton, songButton, saveButton;&#10;&#10;    private Uri selectedImageUri, selectedSongUri;&#10;&#10;    private ActivityResultLauncher&lt;String&gt; imagePickerLauncher, songPickerLauncher;&#10;&#10;    public static MemoryFragment newInstance() {&#10;        return new MemoryFragment();&#10;    }&#10;&#10;    @Override&#10;    public View onCreateView(@NonNull LayoutInflater inflater, @Nullable ViewGroup container,&#10;                             @Nullable Bundle savedInstanceState) {&#10;        return inflater.inflate(R.layout.fragment_memory, container, false);&#10;    }&#10;&#10;    @Override&#10;    public void onViewCreated(@NonNull View view, @Nullable Bundle savedInstanceState) {&#10;        super.onViewCreated(view, savedInstanceState);&#10;&#10;        dateEditText = view.findViewById(R.id.edtDate);&#10;        titleEditText = view.findViewById(R.id.edtTitle);&#10;        descriptionEditText = view.findViewById(R.id.edtNotes);&#10;        dateInputLayout = view.findViewById(R.id.inputLayoutDate);&#10;        descriptionInputLayout = view.findViewById(R.id.inputLayoutDescription);&#10;        imageButton = view.findViewById(R.id.btnUploadImage);&#10;        songButton = view.findViewById(R.id.btnUploadSong);&#10;        saveButton = view.findViewById(R.id.btnSave);&#10;        txtImage = view.findViewById(R.id.textUploadImage);&#10;        txtSong = view.findViewById(R.id.textUploadSong);&#10;&#10;        txtImage.setVisibility(View.INVISIBLE);&#10;        txtSong.setVisibility(View.INVISIBLE);&#10;&#10;&#10;        dateEditText.setOnClickListener(v -&gt; {&#10;            MaterialDatePicker&lt;Long&gt; startDatePicker = MaterialDatePicker.Builder.datePicker()&#10;                    .setTitleText(&quot;Select memory date&quot;)&#10;                    .setSelection(MaterialDatePicker.todayInUtcMilliseconds())&#10;                    .build();&#10;            startDatePicker.show(getParentFragmentManager(), &quot;START_DATE_PICKER&quot;);&#10;            startDatePicker.addOnPositiveButtonClickListener(selection -&gt;&#10;                    dateEditText.setText(new SimpleDateFormat(&quot;dd/MM/yyyy&quot;, Locale.getDefault()).format(new Date((Long) selection)))&#10;            );&#10;            date = new SimpleDateFormat(&quot;dd/MM/yyyy&quot;, Locale.getDefault());&#10;        });&#10;&#10;&#10;        // Register image picker launcher&#10;        imagePickerLauncher = registerForActivityResult(&#10;            new ActivityResultContracts.GetContent(),&#10;            uri -&gt; {&#10;                if (uri != null) {&#10;                    selectedImageUri = uri;&#10;                    Toast.makeText(getActivity(), &quot;Image uploaded&quot;, Toast.LENGTH_SHORT).show();&#10;                }&#10;            }&#10;        );&#10;&#10;        imageButton.setOnClickListener(v -&gt; {&#10;            imagePickerLauncher.launch(&quot;image/*&quot;);&#10;            txtImage.setVisibility(View.VISIBLE);&#10;        });&#10;&#10;&#10;        // Register song picker launcher&#10;        songPickerLauncher = registerForActivityResult(&#10;            new ActivityResultContracts.GetContent(),&#10;            uri -&gt; {&#10;                if (uri != null) {&#10;                    selectedSongUri = uri;&#10;                    Toast.makeText(getActivity(), &quot;Song uploaded&quot;, Toast.LENGTH_SHORT).show();&#10;                }&#10;            }&#10;        );&#10;&#10;        songButton.setOnClickListener(v -&gt; {&#10;            songPickerLauncher.launch(&quot;audio/mpeg&quot;);&#10;            txtSong.setVisibility(View.VISIBLE);&#10;        });&#10;&#10;&#10;        saveButton.setOnClickListener(v -&gt; {&#10;            // Validate fields&#10;            title = titleEditText.getText().toString().trim();&#10;            description = descriptionEditText.getText().toString().trim();&#10;            String dateStr = dateEditText.getText().toString().trim();&#10;&#10;            boolean valid = true;&#10;&#10;            if (dateStr.isEmpty()) {&#10;                dateInputLayout.setError(&quot;Date is required&quot;);&#10;                valid = false;&#10;                return;&#10;            } else {&#10;                dateInputLayout.setError(null);&#10;            }&#10;&#10;            if (title.isEmpty()) {&#10;                titleEditText.setError(&quot;Title is required&quot;);&#10;                valid = false;&#10;                return;&#10;            } else {&#10;                titleEditText.setError(null);&#10;            }&#10;&#10;            if (description.isEmpty()) {&#10;                descriptionEditText.setError(&quot;Description is required&quot;);&#10;                valid = false;&#10;                return;&#10;            } else {&#10;                descriptionEditText.setError(null);&#10;            }&#10;&#10;            if (selectedImageUri == null) {&#10;                txtImage.setError(&quot;Image is required&quot;);&#10;                valid = false;&#10;                return;&#10;            } else {&#10;                txtImage.setError(null);&#10;            }&#10;&#10;            if (selectedSongUri == null) {&#10;                txtSong.setError(&quot;Song is required&quot;);&#10;                valid = false;&#10;                return;&#10;            } else {&#10;                txtSong.setError(null);&#10;            }&#10;&#10;            if (valid) {&#10;                // Copy files to internal storage&#10;                String savedImagePath = copyFileToInternalStorage(selectedImageUri, &quot;image_&quot;);&#10;                String savedSongPath = copyFileToInternalStorage(selectedSongUri, &quot;song_&quot;);&#10;&#10;                if (savedImagePath != null &amp;&amp; savedSongPath != null) {&#10;                    SharedPreferences prefs = getActivity().getSharedPreferences(MainActivity.SHARED_PREFS, getActivity().MODE_PRIVATE);&#10;                    String userEmail = prefs.getString(MainActivity.KEY_EMAIL, &quot;&quot;);&#10;&#10;                    DatabaseHelper dbHelper = new DatabaseHelper(getActivity());&#10;                    dbHelper.addMemory(title, description, dateStr, savedImagePath, savedSongPath, userEmail);&#10;                    Toast.makeText(getActivity(), &quot;Memory saved&quot;, Toast.LENGTH_SHORT).show();&#10;&#10;                    // Clear fields&#10;                    dateEditText.setText(&quot;&quot;);&#10;                    titleEditText.setText(&quot;&quot;);&#10;                    descriptionEditText.setText(&quot;&quot;);&#10;                    txtImage.setVisibility(View.INVISIBLE);&#10;                    txtSong.setVisibility(View.INVISIBLE);&#10;                    selectedImageUri = null;&#10;                    selectedSongUri = null;&#10;                } else {&#10;                    Toast.makeText(getActivity(), &quot;Error saving files. Please try again.&quot;, Toast.LENGTH_SHORT).show();&#10;                }&#10;            } else {&#10;                Toast.makeText(getActivity(), &quot;Please fill all fields&quot;, Toast.LENGTH_SHORT).show();&#10;            }&#10;        });  &#10;    }&#10;&#10;    private String copyFileToInternalStorage(Uri sourceUri, String prefix) {&#10;        try {&#10;            // Create a unique filename&#10;            String fileName = prefix + UUID.randomUUID().toString();&#10;&#10;            // Get the app's internal storage directory&#10;            File internalDir = new File(getActivity().getFilesDir(), &quot;memories&quot;);&#10;            if (!internalDir.exists()) {&#10;                internalDir.mkdirs();&#10;            }&#10;&#10;            File destFile = new File(internalDir, fileName);&#10;&#10;            // Copy the file&#10;            InputStream inputStream = getActivity().getContentResolver().openInputStream(sourceUri);&#10;            FileOutputStream outputStream = new FileOutputStream(destFile);&#10;&#10;            byte[] buffer = new byte[1024];&#10;            int length;&#10;            while ((length = inputStream.read(buffer)) &gt; 0) {&#10;                outputStream.write(buffer, 0, length);&#10;            }&#10;&#10;            outputStream.close();&#10;            inputStream.close();&#10;&#10;            android.util.Log.d(&quot;MemoryFragment&quot;, &quot;File saved to: &quot; + destFile.getAbsolutePath());&#10;            return destFile.getAbsolutePath();&#10;&#10;        } catch (Exception e) {&#10;            android.util.Log.e(&quot;MemoryFragment&quot;, &quot;Error copying file: &quot; + e.getMessage());&#10;            return null;&#10;        }&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/example/tripbuddy/ui/settings/SettingsFragment.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/example/tripbuddy/ui/settings/SettingsFragment.java" />
              <option name="originalContent" value="package com.example.tripbuddy.ui.settings;&#10;&#10;import androidx.lifecycle.ViewModelProvider;&#10;&#10;import com.example.tripbuddy.MainActivity;&#10;import com.example.tripbuddy.Registration;&#10;import com.example.tripbuddy.Trips;&#10;import com.example.tripbuddy.ui.settings.SettingsViewModel;&#10;import com.example.tripbuddy.R;&#10;&#10;import android.content.Intent;&#10;import android.content.SharedPreferences;&#10;import android.os.Bundle;&#10;&#10;import androidx.annotation.NonNull;&#10;import androidx.annotation.Nullable;&#10;import androidx.fragment.app.Fragment;&#10;&#10;import android.view.LayoutInflater;&#10;import android.view.View;&#10;import android.view.ViewGroup;&#10;import android.widget.Button;&#10;&#10;public class SettingsFragment extends Fragment {&#10;&#10;    private SettingsViewModel mViewModel;&#10;&#10;    private Button logoutButton, tripsButton;&#10;&#10;    public static SettingsFragment newInstance() {&#10;        return new SettingsFragment();&#10;    }&#10;&#10;    @Override&#10;    public View onCreateView(@NonNull LayoutInflater inflater, @Nullable ViewGroup container,&#10;                             @Nullable Bundle savedInstanceState) {&#10;        return inflater.inflate(R.layout.fragment_settings, container, false);&#10;    }&#10;&#10;    @Override&#10;    public void onViewCreated(@NonNull View view, @Nullable Bundle savedInstanceState) {&#10;        super.onViewCreated(view, savedInstanceState);&#10;&#10;        logoutButton = view.findViewById(R.id.btnLogout);&#10;        tripsButton = view.findViewById(R.id.btnTrips);&#10;&#10;        logoutButton.setOnClickListener(new View.OnClickListener() {&#10;            @Override&#10;            public void onClick(View v) {&#10;&#10;                SharedPreferences loginPreferences = getActivity().getSharedPreferences(MainActivity.SHARED_PREFS, getActivity().MODE_PRIVATE);&#10;                SharedPreferences.Editor editor = loginPreferences.edit();&#10;                editor.putBoolean(MainActivity.KEY_ISLOGGEDIN, false);&#10;                editor.putString(MainActivity.KEY_EMAIL, &quot;&quot;);&#10;                editor.putString(MainActivity.KEY_PASSWORD, &quot;&quot;);&#10;                editor.apply();&#10;                startActivity(new Intent(getActivity(), MainActivity.class));&#10;                getActivity().finish();&#10;            }&#10;        });&#10;&#10;        tripsButton.setOnClickListener(new View.OnClickListener() {&#10;            @Override&#10;            public void onClick(View v) {&#10;                startActivity(new Intent(getActivity(), Trips.class));&#10;            }&#10;        });&#10;    }&#10;&#10;&#10;}" />
              <option name="updatedContent" value="package com.example.tripbuddy.ui.settings;&#10;&#10;import androidx.lifecycle.ViewModelProvider;&#10;&#10;import com.example.tripbuddy.MainActivity;&#10;import com.example.tripbuddy.Registration;&#10;import com.example.tripbuddy.Trips;&#10;import com.example.tripbuddy.ui.settings.SettingsViewModel;&#10;import com.example.tripbuddy.R;&#10;&#10;import android.content.Intent;&#10;import android.content.SharedPreferences;&#10;import android.os.Bundle;&#10;&#10;import androidx.annotation.NonNull;&#10;import androidx.annotation.Nullable;&#10;import androidx.fragment.app.Fragment;&#10;&#10;import android.view.LayoutInflater;&#10;import android.view.View;&#10;import android.view.ViewGroup;&#10;import android.widget.Button;&#10;&#10;public class SettingsFragment extends Fragment {&#10;&#10;    private SettingsViewModel mViewModel;&#10;&#10;    private Button logoutButton, tripsButton;&#10;&#10;    public static SettingsFragment newInstance() {&#10;        return new SettingsFragment();&#10;    }&#10;&#10;    @Override&#10;    public View onCreateView(@NonNull LayoutInflater inflater, @Nullable ViewGroup container,&#10;                             @Nullable Bundle savedInstanceState) {&#10;        return inflater.inflate(R.layout.fragment_settings, container, false);&#10;    }&#10;&#10;    @Override&#10;    public void onViewCreated(@NonNull View view, @Nullable Bundle savedInstanceState) {&#10;        super.onViewCreated(view, savedInstanceState);&#10;&#10;        logoutButton = view.findViewById(R.id.btnLogout);&#10;        tripsButton = view.findViewById(R.id.btnTrips);&#10;&#10;        logoutButton.setOnClickListener(new View.OnClickListener() {&#10;            @Override&#10;            public void onClick(View v) {&#10;&#10;                SharedPreferences loginPreferences = getActivity().getSharedPreferences(MainActivity.SHARED_PREFS, getActivity().MODE_PRIVATE);&#10;                SharedPreferences.Editor editor = loginPreferences.edit();&#10;                editor.putBoolean(MainActivity.KEY_ISLOGGEDIN, false);&#10;                editor.putString(MainActivity.KEY_EMAIL, &quot;&quot;);&#10;                editor.putString(MainActivity.KEY_PASSWORD, &quot;&quot;);&#10;                editor.apply();&#10;                startActivity(new Intent(getActivity(), MainActivity.class));&#10;                getActivity().finish();&#10;            }&#10;        });&#10;&#10;        tripsButton.setOnClickListener(new View.OnClickListener() {&#10;            @Override&#10;            public void onClick(View v) {&#10;                startActivity(new Intent(getActivity(), Trips.class));&#10;            }&#10;        });&#10;    }&#10;&#10;&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/example/tripbuddy/ui/trip/TripFragment.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/example/tripbuddy/ui/trip/TripFragment.java" />
              <option name="originalContent" value="package com.example.tripbuddy.ui.trip;&#10;&#10;import com.example.tripbuddy.R;&#10;import com.example.tripbuddy.DatabaseHelper;&#10;import com.google.android.material.datepicker.MaterialDatePicker;&#10;import com.google.android.material.textfield.TextInputEditText;&#10;import com.google.android.material.textfield.TextInputLayout;&#10;import com.example.tripbuddy.MainActivity;&#10;&#10;import android.content.SharedPreferences;&#10;import android.os.Bundle;&#10;&#10;import androidx.annotation.NonNull;&#10;import androidx.annotation.Nullable;&#10;import androidx.core.graphics.Insets;&#10;import androidx.core.view.ViewCompat;&#10;import androidx.core.view.WindowInsetsCompat;&#10;import androidx.fragment.app.Fragment;&#10;&#10;import android.view.LayoutInflater;&#10;import android.view.View;&#10;import android.view.ViewGroup;&#10;import android.widget.Button;&#10;import android.widget.CheckBox;&#10;import android.widget.RadioGroup;&#10;import android.widget.TextView;&#10;import android.widget.Toast;&#10;&#10;import java.text.SimpleDateFormat;&#10;import java.util.ArrayList;&#10;import java.util.Date;&#10;import java.util.Locale;&#10;&#10;public class TripFragment extends Fragment {&#10;&#10;    private TextInputEditText startEditText, endEditText, destinationEditText, notesEditText, travelExEditText, customExEditText, mealExEditText;&#10;    private TextInputLayout startInputLayout, endInputLayout, destinationInputLayout, notesInputLayout, travelExInputLayout, customExInputLayout, mealExInputLayout;&#10;&#10;    private Button calculateButton, saveButton;&#10;&#10;    private TextView resultTextView;&#10;&#10;    private CheckBox hiking, bus, sightseeing, museum;&#10;&#10;    private String destination, notes, userEmail;&#10;&#10;    private View scrollView;&#10;&#10;    private double travelExpenses, customExpenses, mealExpenses, totalExpenses, activitiesExpenses, discountAmount;&#10;&#10;    private SimpleDateFormat startDate, endDate;&#10;&#10;    ArrayList&lt;String&gt; activities = new ArrayList&lt;&gt;();&#10;&#10;    private boolean qualifiesForDiscount = false;&#10;&#10;&#10;    @Override&#10;    public View onCreateView(@NonNull LayoutInflater inflater, @Nullable ViewGroup container,&#10;                             @Nullable Bundle savedInstanceState) {&#10;        return inflater.inflate(R.layout.fragment_trip, container, false);&#10;    }&#10;&#10;    @Override&#10;    public void onViewCreated(@NonNull View view, @Nullable Bundle savedInstanceState) {&#10;        super.onViewCreated(view, savedInstanceState);&#10;&#10;        DatabaseHelper dbHelper = new DatabaseHelper(getActivity());&#10;        SharedPreferences loginPreferences = getActivity().getSharedPreferences(MainActivity.SHARED_PREFS, getActivity().MODE_PRIVATE);&#10;        userEmail = loginPreferences.getString(MainActivity.KEY_EMAIL, &quot;&quot;);&#10;&#10;        startEditText = view.findViewById(R.id.edtDateStart);&#10;        endEditText = view.findViewById(R.id.edtDateEnd);&#10;        startInputLayout = view.findViewById(R.id.inputLayoutDateStart);&#10;        endInputLayout = view.findViewById(R.id.inputLayoutDateEnd);&#10;        scrollView = view.findViewById(R.id.scrollView);&#10;        destinationEditText = view.findViewById(R.id.edtDestination);&#10;        destinationInputLayout = view.findViewById(R.id.inputLayoutDestination);&#10;        notesEditText = view.findViewById(R.id.edtNotes);&#10;        notesInputLayout = view.findViewById(R.id.inputLayoutNotes);&#10;        travelExEditText = view.findViewById(R.id.edtTripExpenses);&#10;        travelExInputLayout = view.findViewById(R.id.inputLayoutTravelExpenses);&#10;        customExEditText = view.findViewById(R.id.edtCustomExpenses);&#10;        customExInputLayout = view.findViewById(R.id.inputLayoutCustomExpenses);&#10;        mealExEditText = view.findViewById(R.id.edtMealExpenses);&#10;        mealExInputLayout = view.findViewById(R.id.inputLayoutMealExpenses);&#10;        calculateButton = view.findViewById(R.id.btnCalculate);&#10;        saveButton = view.findViewById(R.id.btnSave);&#10;        resultTextView = view.findViewById(R.id.textEstimates);&#10;        hiking = view.findViewById(R.id.checkHiking);&#10;        bus = view.findViewById(R.id.checkBus);&#10;        sightseeing = view.findViewById(R.id.checkSightseeing);&#10;        museum = view.findViewById(R.id.checkMuseum);&#10;&#10;&#10;&#10;        calculateButton.setOnClickListener(new View.OnClickListener() {&#10;            @Override&#10;            public void onClick(View v) {&#10;&#10;                boolean isValid = true;&#10;                totalExpenses = 0;&#10;                activitiesExpenses = 0;&#10;&#10;                // Validate Start Date&#10;                if (startEditText.getText() == null || startEditText.getText().toString().isEmpty()) {&#10;                    startInputLayout.setError(&quot;Start date cannot be empty&quot;);&#10;                    isValid = false;&#10;                    return;&#10;                } else {&#10;                    startInputLayout.setError(null);&#10;                    startInputLayout.setErrorEnabled(false);&#10;                }&#10;&#10;                // Validate End Date&#10;                if (endEditText.getText() == null || endEditText.getText().toString().isEmpty()) {&#10;                    endInputLayout.setError(&quot;End date cannot be empty&quot;);&#10;                    isValid = false;&#10;                    return;&#10;                } else {&#10;                    endInputLayout.setError(null);&#10;                    endInputLayout.setErrorEnabled(false);&#10;                }&#10;&#10;                // Date validation: start date &gt;= current date, end date &gt; start date&#10;                try {&#10;                    SimpleDateFormat sdf = new SimpleDateFormat(&quot;dd/MM/yyyy&quot;, Locale.getDefault());&#10;                    Date start = sdf.parse(startEditText.getText().toString());&#10;                    Date end = sdf.parse(endEditText.getText().toString());&#10;                    Date now = new Date();&#10;&#10;                    // Remove time from current date for comparison&#10;                    String todayStr = sdf.format(now);&#10;                    Date today = sdf.parse(todayStr);&#10;&#10;                    if (start.before(today)) {&#10;                        startInputLayout.setError(&quot;Start date cannot be before today&quot;);&#10;                        isValid = false;&#10;                        return;&#10;                    } else {&#10;                        startInputLayout.setError(null);&#10;                        startInputLayout.setErrorEnabled(false);&#10;                    }&#10;&#10;                    if (!end.after(start)) {&#10;                        endInputLayout.setError(&quot;End date must be after start date&quot;);&#10;                        isValid = false;&#10;                        return;&#10;                    } else {&#10;                        endInputLayout.setError(null);&#10;                        endInputLayout.setErrorEnabled(false);&#10;                    }&#10;                } catch (Exception e) {&#10;                    startInputLayout.setError(&quot;Invalid date format&quot;);&#10;                    endInputLayout.setError(&quot;Invalid date format&quot;);&#10;                    isValid = false;&#10;                    return;&#10;                }&#10;&#10;                // Validate Destination&#10;                if (destinationEditText.getText() == null || destinationEditText.getText().toString().isEmpty()) {&#10;                    destinationInputLayout.setError(&quot;Destination cannot be empty&quot;);&#10;                    isValid = false;&#10;                } else {&#10;                    destination = destinationEditText.getText().toString();&#10;                    destinationInputLayout.setError(null);&#10;                    destinationInputLayout.setErrorEnabled(false);&#10;                }&#10;&#10;                // Validate Notes&#10;                if (notesEditText.getText() == null || notesEditText.getText().toString().isEmpty()) {&#10;                    notesInputLayout.setError(&quot;Notes cannot be empty&quot;);&#10;                    isValid = false;&#10;                } else {&#10;                    notes = notesEditText.getText().toString();&#10;                    notesInputLayout.setError(null);&#10;                    notesInputLayout.setErrorEnabled(false);&#10;                }&#10;&#10;                // Validate Travel Expenses&#10;                String travelEx = travelExEditText.getText() != null ? travelExEditText.getText().toString() : &quot;&quot;;&#10;                if (travelEx.isEmpty()) {&#10;                    travelExInputLayout.setError(&quot;Travel expenses cannot be empty&quot;);&#10;                    isValid = false;&#10;                } else {&#10;                    try {&#10;                        travelExpenses = Double.parseDouble(travelEx);&#10;                        travelExInputLayout.setError(null);&#10;                        travelExInputLayout.setErrorEnabled(false);&#10;                    } catch (NumberFormatException e) {&#10;                        travelExInputLayout.setError(&quot;Enter a valid number&quot;);&#10;                        isValid = false;&#10;                    }&#10;                }&#10;&#10;                // Validate Custom Expenses&#10;                String customEx = customExEditText.getText() != null ? customExEditText.getText().toString() : &quot;&quot;;&#10;                if (customEx.isEmpty()) {&#10;                    customExInputLayout.setError(&quot;Custom expenses cannot be empty&quot;);&#10;                    isValid = false;&#10;                } else {&#10;                    try {&#10;                        customExpenses = Double.parseDouble(customEx);&#10;                        customExInputLayout.setError(null);&#10;                        customExInputLayout.setErrorEnabled(false);&#10;                    } catch (NumberFormatException e) {&#10;                        customExInputLayout.setError(&quot;Enter a valid number&quot;);&#10;                        isValid = false;&#10;                    }&#10;                }&#10;&#10;                // Validate Meal Expenses&#10;                String mealEx = mealExEditText.getText() != null ? mealExEditText.getText().toString() : &quot;&quot;;&#10;                if (mealEx.isEmpty()) {&#10;                    mealExInputLayout.setError(&quot;Meal expenses cannot be empty&quot;);&#10;                    isValid = false;&#10;                } else {&#10;                    try {&#10;                        mealExpenses = Double.parseDouble(mealEx);&#10;                        mealExInputLayout.setError(null);&#10;                        mealExInputLayout.setErrorEnabled(false);&#10;                    } catch (NumberFormatException e) {&#10;                        mealExInputLayout.setError(&quot;Enter a valid number&quot;);&#10;                        isValid = false;&#10;                    }&#10;                }&#10;&#10;                // If all fields are valid, proceed with activities and final calculations&#10;                if (isValid) {&#10;                    // Check if user qualifies for discount (has 3 or more previous trips)&#10;                    int previousTripCount = dbHelper.getTripCountForUser(userEmail);&#10;                    qualifiesForDiscount = previousTripCount &gt;= 3;&#10;                    &#10;                    android.util.Log.d(&quot;TripFragment&quot;, &quot;User has &quot; + previousTripCount + &quot; previous trips. Qualifies for discount: &quot; + qualifiesForDiscount);&#10;                    &#10;                    totalExpenses = travelExpenses + customExpenses + mealExpenses;&#10;&#10;                    if (hiking.isChecked()) {&#10;                        activities.add(&quot;Hiking&quot;);&#10;                        activitiesExpenses += 450;&#10;                    }&#10;                    if (bus.isChecked()) {&#10;                        activities.add(&quot;Bus&quot;);&#10;                        activitiesExpenses += 500;&#10;                    }&#10;                    if (sightseeing.isChecked()) {&#10;                        activities.add(&quot;Sightseeing&quot;);&#10;                        activitiesExpenses += 2500;&#10;                    }&#10;                    if (museum.isChecked()) {&#10;                        activities.add(&quot;Museum&quot;);&#10;                        activitiesExpenses += 150;&#10;                    }&#10;&#10;                    totalExpenses += activitiesExpenses;&#10;                    &#10;                    // Apply 10% discount if qualified&#10;                    String discountText;&#10;                    double finalTotal;&#10;                    if (qualifiesForDiscount) {&#10;                        discountAmount = totalExpenses * 0.10; // 10% discount&#10;                        finalTotal = totalExpenses - discountAmount;&#10;                        discountText = &quot;R &quot; + String.format(&quot;%.2f&quot;, discountAmount) + &quot; (10% off - 4th trip bonus!)&quot;;&#10;                        &#10;                        Toast.makeText(getActivity(), &quot;Congratulations! You qualify for a 10% discount on this trip!&quot;, Toast.LENGTH_LONG).show();&#10;                    } else {&#10;                        discountAmount = 0;&#10;                        finalTotal = totalExpenses;&#10;                        int tripsNeeded = 3 - previousTripCount;&#10;                        if (tripsNeeded &gt; 0) {&#10;                            discountText = &quot;Save &quot; + tripsNeeded + &quot; more trip(s) to unlock 10% discount!&quot;;&#10;                        } else {&#10;                            discountText = &quot;N/A&quot;;&#10;                        }&#10;                    }&#10;&#10;                    String temp = &quot;Travel expenses - R &quot; + String.format(&quot;%.2f&quot;, travelExpenses) + &#10;                                &quot;\nActivity expenses - R &quot; + String.format(&quot;%.2f&quot;, activitiesExpenses) + &#10;                                &quot;\nCustom expenses - R &quot; + String.format(&quot;%.2f&quot;, customExpenses) + &#10;                                &quot;\nMeal expenses - R &quot; + String.format(&quot;%.2f&quot;, mealExpenses) + &#10;                                &quot;\n --------------------- &quot; +&#10;                                &quot;\nDiscount - &quot; + discountText +&#10;                                &quot;\nTotal expenses - R &quot; + String.format(&quot;%.2f&quot;, finalTotal);&#10;&#10;                    resultTextView.setText(temp);&#10;&#10;                    saveButton.setEnabled(true);&#10;                }&#10;            }&#10;        });&#10;&#10;        saveButton.setOnClickListener(v -&gt; {&#10;            dbHelper.addTrip(&#10;                    destination,&#10;                    startEditText.getText().toString(),&#10;                    endEditText.getText().toString(),&#10;                    String.join(&quot;, &quot;, activities),&#10;                    travelExpenses,&#10;                    customExpenses,&#10;                    mealExpenses,&#10;                    notes,&#10;                    userEmail&#10;            );&#10;&#10;            Toast.makeText(getActivity(), &quot;Trip saved&quot;, Toast.LENGTH_SHORT).show();&#10;&#10;            // Clear fields and reset variables&#10;            startEditText.setText(&quot;&quot;);&#10;            endEditText.setText(&quot;&quot;);&#10;            destinationEditText.setText(&quot;&quot;);&#10;            notesEditText.setText(&quot;&quot;);&#10;            travelExEditText.setText(&quot;&quot;);&#10;            customExEditText.setText(&quot;&quot;);&#10;            mealExEditText.setText(&quot;&quot;);&#10;            hiking.setChecked(false);&#10;            bus.setChecked(false);&#10;            sightseeing.setChecked(false);&#10;            museum.setChecked(false);&#10;            resultTextView.setText(&quot;Travel expenses - $ \nActivity expenses - $ \nCustom expenses - $ \nMeal expenses - $ \n --------------------- \nDiscount - N/A\nTotal estimated cost - $&quot;);&#10;            activities.clear();&#10;            totalExpenses = 0;&#10;            travelExpenses = 0;&#10;            customExpenses = 0;&#10;            mealExpenses = 0;&#10;            activitiesExpenses = 0;&#10;            discountAmount = 0;&#10;            qualifiesForDiscount = false;&#10;            destination = &quot;&quot;;&#10;            notes = &quot;&quot;;&#10;            startDate = null;&#10;            endDate = null;&#10;&#10;&#10;            saveButton.setEnabled(false);&#10;        });&#10;&#10;        startEditText.setOnClickListener(v -&gt; {&#10;            MaterialDatePicker&lt;Long&gt; startDatePicker = MaterialDatePicker.Builder.datePicker()&#10;                    .setTitleText(&quot;Select start date&quot;)&#10;                    .setSelection(MaterialDatePicker.todayInUtcMilliseconds())&#10;                    .build();&#10;            startDatePicker.show(getParentFragmentManager(), &quot;START_DATE_PICKER&quot;);&#10;            startDatePicker.addOnPositiveButtonClickListener(selection -&gt;&#10;                startEditText.setText(new SimpleDateFormat(&quot;dd/MM/yyyy&quot;, Locale.getDefault()).format(new Date((Long) selection)))&#10;            );&#10;&#10;            startDate = new SimpleDateFormat(&quot;dd/MM/yyyy&quot;, Locale.getDefault());&#10;        });&#10;&#10;        endEditText.setOnClickListener(v -&gt; {&#10;            MaterialDatePicker&lt;Long&gt; endDatePicker = MaterialDatePicker.Builder.datePicker()&#10;                    .setTitleText(&quot;Select end date&quot;)&#10;                    .setSelection(MaterialDatePicker.todayInUtcMilliseconds())&#10;                    .build();&#10;            endDatePicker.show(getParentFragmentManager(), &quot;END_DATE_PICKER&quot;);&#10;            endDatePicker.addOnPositiveButtonClickListener(selection -&gt;&#10;                endEditText.setText(new SimpleDateFormat(&quot;dd/MM/yyyy&quot;, Locale.getDefault()).format(new Date((Long) selection)))&#10;            );&#10;&#10;            endDate = new SimpleDateFormat(&quot;dd/MM/yyyy&quot;, Locale.getDefault());&#10;        });&#10;&#10;//        ViewCompat.setOnApplyWindowInsetsListener(scrollView, (v, insets) -&gt; {&#10;//            Insets navBarInsets = insets.getInsets(WindowInsetsCompat.Type.systemBars());&#10;//            v.setPadding(0, 0, 0, navBarInsets.bottom);&#10;//            return insets;&#10;//        });&#10;&#10;        android.text.TextWatcher disableSaveTextWatcher = new android.text.TextWatcher() {&#10;            @Override&#10;            public void beforeTextChanged(CharSequence s, int start, int count, int after) {}&#10;            @Override&#10;            public void onTextChanged(CharSequence s, int start, int before, int count) {&#10;                saveButton.setEnabled(false);&#10;            }&#10;            @Override&#10;            public void afterTextChanged(android.text.Editable s) {}&#10;        };&#10;        startEditText.addTextChangedListener(disableSaveTextWatcher);&#10;        endEditText.addTextChangedListener(disableSaveTextWatcher);&#10;        destinationEditText.addTextChangedListener(disableSaveTextWatcher);&#10;        notesEditText.addTextChangedListener(disableSaveTextWatcher);&#10;        travelExEditText.addTextChangedListener(disableSaveTextWatcher);&#10;        customExEditText.addTextChangedListener(disableSaveTextWatcher);&#10;        mealExEditText.addTextChangedListener(disableSaveTextWatcher);&#10;    }&#10;&#10;}" />
              <option name="updatedContent" value="package com.example.tripbuddy.ui.trip;&#10;&#10;import com.example.tripbuddy.R;&#10;import com.example.tripbuddy.DatabaseHelper;&#10;import com.google.android.material.datepicker.MaterialDatePicker;&#10;import com.google.android.material.textfield.TextInputEditText;&#10;import com.google.android.material.textfield.TextInputLayout;&#10;import com.example.tripbuddy.MainActivity;&#10;&#10;import android.content.SharedPreferences;&#10;import android.os.Bundle;&#10;&#10;import androidx.annotation.NonNull;&#10;import androidx.annotation.Nullable;&#10;import androidx.core.graphics.Insets;&#10;import androidx.core.view.ViewCompat;&#10;import androidx.core.view.WindowInsetsCompat;&#10;import androidx.fragment.app.Fragment;&#10;&#10;import android.view.LayoutInflater;&#10;import android.view.View;&#10;import android.view.ViewGroup;&#10;import android.widget.Button;&#10;import android.widget.CheckBox;&#10;import android.widget.RadioGroup;&#10;import android.widget.TextView;&#10;import android.widget.Toast;&#10;&#10;import java.text.SimpleDateFormat;&#10;import java.util.ArrayList;&#10;import java.util.Date;&#10;import java.util.Locale;&#10;&#10;public class TripFragment extends Fragment {&#10;&#10;    private TextInputEditText startEditText, endEditText, destinationEditText, notesEditText, travelExEditText, customExEditText, mealExEditText;&#10;    private TextInputLayout startInputLayout, endInputLayout, destinationInputLayout, notesInputLayout, travelExInputLayout, customExInputLayout, mealExInputLayout;&#10;&#10;    private Button calculateButton, saveButton;&#10;&#10;    private TextView resultTextView;&#10;&#10;    private CheckBox hiking, bus, sightseeing, museum;&#10;&#10;    private String destination, notes, userEmail;&#10;&#10;    private View scrollView;&#10;&#10;    private double travelExpenses, customExpenses, mealExpenses, totalExpenses, activitiesExpenses, discountAmount;&#10;&#10;    private SimpleDateFormat startDate, endDate;&#10;&#10;    ArrayList&lt;String&gt; activities = new ArrayList&lt;&gt;();&#10;&#10;    private boolean qualifiesForDiscount = false;&#10;&#10;&#10;    @Override&#10;    public View onCreateView(@NonNull LayoutInflater inflater, @Nullable ViewGroup container,&#10;                             @Nullable Bundle savedInstanceState) {&#10;        return inflater.inflate(R.layout.fragment_trip, container, false);&#10;    }&#10;&#10;    @Override&#10;    public void onViewCreated(@NonNull View view, @Nullable Bundle savedInstanceState) {&#10;        super.onViewCreated(view, savedInstanceState);&#10;&#10;        DatabaseHelper dbHelper = new DatabaseHelper(getActivity());&#10;        SharedPreferences loginPreferences = getActivity().getSharedPreferences(MainActivity.SHARED_PREFS, getActivity().MODE_PRIVATE);&#10;        userEmail = loginPreferences.getString(MainActivity.KEY_EMAIL, &quot;&quot;);&#10;&#10;        startEditText = view.findViewById(R.id.edtDateStart);&#10;        endEditText = view.findViewById(R.id.edtDateEnd);&#10;        startInputLayout = view.findViewById(R.id.inputLayoutDateStart);&#10;        endInputLayout = view.findViewById(R.id.inputLayoutDateEnd);&#10;        scrollView = view.findViewById(R.id.scrollView);&#10;        destinationEditText = view.findViewById(R.id.edtDestination);&#10;        destinationInputLayout = view.findViewById(R.id.inputLayoutDestination);&#10;        notesEditText = view.findViewById(R.id.edtNotes);&#10;        notesInputLayout = view.findViewById(R.id.inputLayoutNotes);&#10;        travelExEditText = view.findViewById(R.id.edtTripExpenses);&#10;        travelExInputLayout = view.findViewById(R.id.inputLayoutTravelExpenses);&#10;        customExEditText = view.findViewById(R.id.edtCustomExpenses);&#10;        customExInputLayout = view.findViewById(R.id.inputLayoutCustomExpenses);&#10;        mealExEditText = view.findViewById(R.id.edtMealExpenses);&#10;        mealExInputLayout = view.findViewById(R.id.inputLayoutMealExpenses);&#10;        calculateButton = view.findViewById(R.id.btnCalculate);&#10;        saveButton = view.findViewById(R.id.btnSave);&#10;        resultTextView = view.findViewById(R.id.textEstimates);&#10;        hiking = view.findViewById(R.id.checkHiking);&#10;        bus = view.findViewById(R.id.checkBus);&#10;        sightseeing = view.findViewById(R.id.checkSightseeing);&#10;        museum = view.findViewById(R.id.checkMuseum);&#10;&#10;&#10;&#10;        calculateButton.setOnClickListener(new View.OnClickListener() {&#10;            @Override&#10;            public void onClick(View v) {&#10;&#10;                boolean isValid = true;&#10;                totalExpenses = 0;&#10;                activitiesExpenses = 0;&#10;&#10;                // Validate Start Date&#10;                if (startEditText.getText() == null || startEditText.getText().toString().isEmpty()) {&#10;                    startInputLayout.setError(&quot;Start date cannot be empty&quot;);&#10;                    isValid = false;&#10;                    return;&#10;                } else {&#10;                    startInputLayout.setError(null);&#10;                    startInputLayout.setErrorEnabled(false);&#10;                }&#10;&#10;                // Validate End Date&#10;                if (endEditText.getText() == null || endEditText.getText().toString().isEmpty()) {&#10;                    endInputLayout.setError(&quot;End date cannot be empty&quot;);&#10;                    isValid = false;&#10;                    return;&#10;                } else {&#10;                    endInputLayout.setError(null);&#10;                    endInputLayout.setErrorEnabled(false);&#10;                }&#10;&#10;                // Date validation: start date &gt;= current date, end date &gt; start date&#10;                try {&#10;                    SimpleDateFormat sdf = new SimpleDateFormat(&quot;dd/MM/yyyy&quot;, Locale.getDefault());&#10;                    Date start = sdf.parse(startEditText.getText().toString());&#10;                    Date end = sdf.parse(endEditText.getText().toString());&#10;                    Date now = new Date();&#10;&#10;                    // Remove time from current date for comparison&#10;                    String todayStr = sdf.format(now);&#10;                    Date today = sdf.parse(todayStr);&#10;&#10;                    if (start.before(today)) {&#10;                        startInputLayout.setError(&quot;Start date cannot be before today&quot;);&#10;                        isValid = false;&#10;                        return;&#10;                    } else {&#10;                        startInputLayout.setError(null);&#10;                        startInputLayout.setErrorEnabled(false);&#10;                    }&#10;&#10;                    if (!end.after(start)) {&#10;                        endInputLayout.setError(&quot;End date must be after start date&quot;);&#10;                        isValid = false;&#10;                        return;&#10;                    } else {&#10;                        endInputLayout.setError(null);&#10;                        endInputLayout.setErrorEnabled(false);&#10;                    }&#10;                } catch (Exception e) {&#10;                    startInputLayout.setError(&quot;Invalid date format&quot;);&#10;                    endInputLayout.setError(&quot;Invalid date format&quot;);&#10;                    isValid = false;&#10;                    return;&#10;                }&#10;&#10;                // Validate Destination&#10;                if (destinationEditText.getText() == null || destinationEditText.getText().toString().isEmpty()) {&#10;                    destinationInputLayout.setError(&quot;Destination cannot be empty&quot;);&#10;                    isValid = false;&#10;                } else {&#10;                    destination = destinationEditText.getText().toString();&#10;                    destinationInputLayout.setError(null);&#10;                    destinationInputLayout.setErrorEnabled(false);&#10;                }&#10;&#10;                // Validate Notes&#10;                if (notesEditText.getText() == null || notesEditText.getText().toString().isEmpty()) {&#10;                    notesInputLayout.setError(&quot;Notes cannot be empty&quot;);&#10;                    isValid = false;&#10;                } else {&#10;                    notes = notesEditText.getText().toString();&#10;                    notesInputLayout.setError(null);&#10;                    notesInputLayout.setErrorEnabled(false);&#10;                }&#10;&#10;                // Validate Travel Expenses&#10;                String travelEx = travelExEditText.getText() != null ? travelExEditText.getText().toString() : &quot;&quot;;&#10;                if (travelEx.isEmpty()) {&#10;                    travelExInputLayout.setError(&quot;Travel expenses cannot be empty&quot;);&#10;                    isValid = false;&#10;                } else {&#10;                    try {&#10;                        travelExpenses = Double.parseDouble(travelEx);&#10;                        travelExInputLayout.setError(null);&#10;                        travelExInputLayout.setErrorEnabled(false);&#10;                    } catch (NumberFormatException e) {&#10;                        travelExInputLayout.setError(&quot;Enter a valid number&quot;);&#10;                        isValid = false;&#10;                    }&#10;                }&#10;&#10;                // Validate Custom Expenses&#10;                String customEx = customExEditText.getText() != null ? customExEditText.getText().toString() : &quot;&quot;;&#10;                if (customEx.isEmpty()) {&#10;                    customExInputLayout.setError(&quot;Custom expenses cannot be empty&quot;);&#10;                    isValid = false;&#10;                } else {&#10;                    try {&#10;                        customExpenses = Double.parseDouble(customEx);&#10;                        customExInputLayout.setError(null);&#10;                        customExInputLayout.setErrorEnabled(false);&#10;                    } catch (NumberFormatException e) {&#10;                        customExInputLayout.setError(&quot;Enter a valid number&quot;);&#10;                        isValid = false;&#10;                    }&#10;                }&#10;&#10;                // Validate Meal Expenses&#10;                String mealEx = mealExEditText.getText() != null ? mealExEditText.getText().toString() : &quot;&quot;;&#10;                if (mealEx.isEmpty()) {&#10;                    mealExInputLayout.setError(&quot;Meal expenses cannot be empty&quot;);&#10;                    isValid = false;&#10;                } else {&#10;                    try {&#10;                        mealExpenses = Double.parseDouble(mealEx);&#10;                        mealExInputLayout.setError(null);&#10;                        mealExInputLayout.setErrorEnabled(false);&#10;                    } catch (NumberFormatException e) {&#10;                        mealExInputLayout.setError(&quot;Enter a valid number&quot;);&#10;                        isValid = false;&#10;                    }&#10;                }&#10;&#10;                // If all fields are valid, proceed with activities and final calculations&#10;                if (isValid) {&#10;                    // Check if user qualifies for discount (has 3 or more previous trips)&#10;                    int previousTripCount = dbHelper.getTripCountForUser(userEmail);&#10;                    qualifiesForDiscount = previousTripCount &gt;= 3;&#10;                    &#10;                    android.util.Log.d(&quot;TripFragment&quot;, &quot;User has &quot; + previousTripCount + &quot; previous trips. Qualifies for discount: &quot; + qualifiesForDiscount);&#10;                    &#10;                    totalExpenses = travelExpenses + customExpenses + mealExpenses;&#10;&#10;                    if (hiking.isChecked()) {&#10;                        activities.add(&quot;Hiking&quot;);&#10;                        activitiesExpenses += 450;&#10;                    }&#10;                    if (bus.isChecked()) {&#10;                        activities.add(&quot;Bus&quot;);&#10;                        activitiesExpenses += 500;&#10;                    }&#10;                    if (sightseeing.isChecked()) {&#10;                        activities.add(&quot;Sightseeing&quot;);&#10;                        activitiesExpenses += 2500;&#10;                    }&#10;                    if (museum.isChecked()) {&#10;                        activities.add(&quot;Museum&quot;);&#10;                        activitiesExpenses += 150;&#10;                    }&#10;&#10;                    totalExpenses += activitiesExpenses;&#10;                    &#10;                    // Apply 10% discount if qualified&#10;                    String discountText;&#10;                    double finalTotal;&#10;                    if (qualifiesForDiscount) {&#10;                        discountAmount = totalExpenses * 0.10; // 10% discount&#10;                        finalTotal = totalExpenses - discountAmount;&#10;                        discountText = &quot;R &quot; + String.format(&quot;%.2f&quot;, discountAmount) + &quot; (10% off - 4th trip bonus!)&quot;;&#10;                        &#10;                        Toast.makeText(getActivity(), &quot;Congratulations! You qualify for a 10% discount on this trip!&quot;, Toast.LENGTH_LONG).show();&#10;                    } else {&#10;                        discountAmount = 0;&#10;                        finalTotal = totalExpenses;&#10;                        int tripsNeeded = 3 - previousTripCount;&#10;                        if (tripsNeeded &gt; 0) {&#10;                            discountText = &quot;Save &quot; + tripsNeeded + &quot; more trip(s) to unlock 10% discount!&quot;;&#10;                        } else {&#10;                            discountText = &quot;N/A&quot;;&#10;                        }&#10;                    }&#10;&#10;                    String temp = &quot;Travel expenses - R &quot; + String.format(&quot;%.2f&quot;, travelExpenses) + &#10;                                &quot;\nActivity expenses - R &quot; + String.format(&quot;%.2f&quot;, activitiesExpenses) + &#10;                                &quot;\nCustom expenses - R &quot; + String.format(&quot;%.2f&quot;, customExpenses) + &#10;                                &quot;\nMeal expenses - R &quot; + String.format(&quot;%.2f&quot;, mealExpenses) + &#10;                                &quot;\n --------------------- &quot; +&#10;                                &quot;\nDiscount - &quot; + discountText +&#10;                                &quot;\nTotal expenses - R &quot; + String.format(&quot;%.2f&quot;, finalTotal);&#10;&#10;                    resultTextView.setText(temp);&#10;&#10;                    saveButton.setEnabled(true);&#10;                }&#10;            }&#10;        });&#10;&#10;        saveButton.setOnClickListener(v -&gt; {&#10;            dbHelper.addTrip(&#10;                    destination,&#10;                    startEditText.getText().toString(),&#10;                    endEditText.getText().toString(),&#10;                    String.join(&quot;, &quot;, activities),&#10;                    travelExpenses,&#10;                    customExpenses,&#10;                    mealExpenses,&#10;                    notes,&#10;                    userEmail&#10;            );&#10;&#10;            Toast.makeText(getActivity(), &quot;Trip saved&quot;, Toast.LENGTH_SHORT).show();&#10;&#10;            // Clear fields and reset variables&#10;            startEditText.setText(&quot;&quot;);&#10;            endEditText.setText(&quot;&quot;);&#10;            destinationEditText.setText(&quot;&quot;);&#10;            notesEditText.setText(&quot;&quot;);&#10;            travelExEditText.setText(&quot;&quot;);&#10;            customExEditText.setText(&quot;&quot;);&#10;            mealExEditText.setText(&quot;&quot;);&#10;            hiking.setChecked(false);&#10;            bus.setChecked(false);&#10;            sightseeing.setChecked(false);&#10;            museum.setChecked(false);&#10;            resultTextView.setText(&quot;Travel expenses - $ \nActivity expenses - $ \nCustom expenses - $ \nMeal expenses - $ \n --------------------- \nDiscount - N/A\nTotal estimated cost - $&quot;);&#10;            activities.clear();&#10;            totalExpenses = 0;&#10;            travelExpenses = 0;&#10;            customExpenses = 0;&#10;            mealExpenses = 0;&#10;            activitiesExpenses = 0;&#10;            discountAmount = 0;&#10;            qualifiesForDiscount = false;&#10;            destination = &quot;&quot;;&#10;            notes = &quot;&quot;;&#10;            startDate = null;&#10;            endDate = null;&#10;&#10;            saveButton.setEnabled(false);&#10;        });&#10;&#10;        startEditText.setOnClickListener(v -&gt; {&#10;            MaterialDatePicker&lt;Long&gt; startDatePicker = MaterialDatePicker.Builder.datePicker()&#10;                    .setTitleText(&quot;Select start date&quot;)&#10;                    .setSelection(MaterialDatePicker.todayInUtcMilliseconds())&#10;                    .build();&#10;            startDatePicker.show(getParentFragmentManager(), &quot;START_DATE_PICKER&quot;);&#10;            startDatePicker.addOnPositiveButtonClickListener(selection -&gt;&#10;                startEditText.setText(new SimpleDateFormat(&quot;dd/MM/yyyy&quot;, Locale.getDefault()).format(new Date((Long) selection)))&#10;            );&#10;&#10;            startDate = new SimpleDateFormat(&quot;dd/MM/yyyy&quot;, Locale.getDefault());&#10;        });&#10;&#10;        endEditText.setOnClickListener(v -&gt; {&#10;            MaterialDatePicker&lt;Long&gt; endDatePicker = MaterialDatePicker.Builder.datePicker()&#10;                    .setTitleText(&quot;Select end date&quot;)&#10;                    .setSelection(MaterialDatePicker.todayInUtcMilliseconds())&#10;                    .build();&#10;            endDatePicker.show(getParentFragmentManager(), &quot;END_DATE_PICKER&quot;);&#10;            endDatePicker.addOnPositiveButtonClickListener(selection -&gt;&#10;                endEditText.setText(new SimpleDateFormat(&quot;dd/MM/yyyy&quot;, Locale.getDefault()).format(new Date((Long) selection)))&#10;            );&#10;&#10;            endDate = new SimpleDateFormat(&quot;dd/MM/yyyy&quot;, Locale.getDefault());&#10;        });&#10;&#10;//        ViewCompat.setOnApplyWindowInsetsListener(scrollView, (v, insets) -&gt; {&#10;//            Insets navBarInsets = insets.getInsets(WindowInsetsCompat.Type.systemBars());&#10;//            v.setPadding(0, 0, 0, navBarInsets.bottom);&#10;//            return insets;&#10;//        });&#10;&#10;        android.text.TextWatcher disableSaveTextWatcher = new android.text.TextWatcher() {&#10;            @Override&#10;            public void beforeTextChanged(CharSequence s, int start, int count, int after) {}&#10;            @Override&#10;            public void onTextChanged(CharSequence s, int start, int before, int count) {&#10;                saveButton.setEnabled(false);&#10;            }&#10;            @Override&#10;            public void afterTextChanged(android.text.Editable s) {}&#10;        };&#10;        startEditText.addTextChangedListener(disableSaveTextWatcher);&#10;        endEditText.addTextChangedListener(disableSaveTextWatcher);&#10;        destinationEditText.addTextChangedListener(disableSaveTextWatcher);&#10;        notesEditText.addTextChangedListener(disableSaveTextWatcher);&#10;        travelExEditText.addTextChangedListener(disableSaveTextWatcher);&#10;        customExEditText.addTextChangedListener(disableSaveTextWatcher);&#10;        mealExEditText.addTextChangedListener(disableSaveTextWatcher);&#10;    }&#10;&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/res/layout/activity_trips.xml">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/res/layout/activity_trips.xml" />
              <option name="originalContent" value="&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;&#10;&#10;&lt;ScrollView&#10;    android:layout_width=&quot;match_parent&quot;&#10;    android:layout_height=&quot;match_parent&quot;&#10;    xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;&#10;    xmlns:app=&quot;http://schemas.android.com/apk/res-auto&quot;&#10;    xmlns:tools=&quot;http://schemas.android.com/tools&quot;&gt;&#10;&#10;    &lt;androidx.constraintlayout.widget.ConstraintLayout&#10;        android:id=&quot;@+id/main&quot;&#10;        android:layout_width=&quot;match_parent&quot;&#10;        android:layout_height=&quot;wrap_content&quot;&#10;        tools:context=&quot;.Trips&quot;&#10;        android:minHeight=&quot;match_parent&quot;&gt;&#10;&#10;        &lt;LinearLayout&#10;            android:id=&quot;@+id/layoutBack&quot;&#10;            android:layout_width=&quot;0dp&quot;&#10;            android:layout_height=&quot;wrap_content&quot;&#10;            android:orientation=&quot;horizontal&quot;&#10;            app:layout_constraintEnd_toEndOf=&quot;parent&quot;&#10;            app:layout_constraintStart_toStartOf=&quot;parent&quot;&#10;            app:layout_constraintTop_toTopOf=&quot;parent&quot;&#10;            android:padding=&quot;20dp&quot;&gt;&#10;&#10;            &lt;com.google.android.material.button.MaterialButton&#10;                android:id=&quot;@+id/btnBack&quot;&#10;                android:layout_width=&quot;wrap_content&quot;&#10;                android:layout_height=&quot;wrap_content&quot;&#10;&#10;                android:background=&quot;@drawable/button_shape&quot;&#10;                android:fontFamily=&quot;@font/inter_18pt&quot;&#10;                android:text=&quot;Back&quot;&#10;                android:textAllCaps=&quot;false&quot;&#10;                android:textSize=&quot;18sp&quot;&#10;                /&gt;&#10;&#10;            &lt;com.google.android.material.button.MaterialButton&#10;                android:id=&quot;@+id/btnDebugShowAll&quot;&#10;                android:layout_width=&quot;wrap_content&quot;&#10;                android:layout_height=&quot;wrap_content&quot;&#10;                android:background=&quot;@drawable/button_shape&quot;&#10;                android:fontFamily=&quot;@font/inter_18pt&quot;&#10;                android:text=&quot;Show All Trips&quot;&#10;                android:textAllCaps=&quot;false&quot;&#10;                android:textSize=&quot;14sp&quot;&#10;                android:layout_marginStart=&quot;10dp&quot;&#10;                /&gt;&#10;&#10;            &lt;com.google.android.material.button.MaterialButton&#10;                android:id=&quot;@+id/btnDebugInsertTest&quot;&#10;                android:layout_width=&quot;wrap_content&quot;&#10;                android:layout_height=&quot;wrap_content&quot;&#10;                android:background=&quot;@drawable/button_shape&quot;&#10;                android:fontFamily=&quot;@font/inter_18pt&quot;&#10;                android:text=&quot;Insert Test Trip&quot;&#10;                android:textAllCaps=&quot;false&quot;&#10;                android:textSize=&quot;12sp&quot;&#10;                android:layout_marginStart=&quot;10dp&quot;&#10;                /&gt;&#10;        &lt;/LinearLayout&gt;&#10;&#10;        &lt;TextView&#10;            android:id=&quot;@+id/textNoTrips&quot;&#10;            android:layout_width=&quot;wrap_content&quot;&#10;            android:layout_height=&quot;wrap_content&quot;&#10;            android:layout_marginTop=&quot;20dp&quot;&#10;            android:fontFamily=&quot;@font/inter_18pt_bold&quot;&#10;            android:text=&quot;No trips found&quot;&#10;            android:textSize=&quot;18sp&quot;&#10;            android:visibility=&quot;gone&quot;&#10;            app:layout_constraintEnd_toEndOf=&quot;parent&quot;&#10;            app:layout_constraintStart_toStartOf=&quot;parent&quot;&#10;            app:layout_constraintTop_toBottomOf=&quot;@+id/layoutBack&quot;&#10;            /&gt;&#10;&#10;        &lt;androidx.recyclerview.widget.RecyclerView&#10;            android:id=&quot;@+id/recyclerTrips&quot;&#10;            android:layout_width=&quot;0dp&quot;&#10;            android:layout_height=&quot;wrap_content&quot;&#10;            android:minHeight=&quot;400dp&quot;&#10;            app:layout_constraintTop_toBottomOf=&quot;@id/layoutBack&quot;&#10;            app:layout_constraintStart_toStartOf=&quot;parent&quot;&#10;            app:layout_constraintEnd_toEndOf=&quot;parent&quot;&#10;            app:layout_constraintBottom_toBottomOf=&quot;parent&quot;&#10;            android:padding=&quot;16dp&quot;&#10;            tools:listitem=&quot;@layout/item_trip&quot;/&gt;&#10;&#10;    &lt;/androidx.constraintlayout.widget.ConstraintLayout&gt;&#10;&#10;&lt;/ScrollView&gt;&#10;" />
              <option name="updatedContent" value="&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;&#10;&#10;&lt;ScrollView&#10;    android:layout_width=&quot;match_parent&quot;&#10;    android:layout_height=&quot;match_parent&quot;&#10;    xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;&#10;    xmlns:app=&quot;http://schemas.android.com/apk/res-auto&quot;&#10;    xmlns:tools=&quot;http://schemas.android.com/tools&quot;&gt;&#10;&#10;    &lt;androidx.constraintlayout.widget.ConstraintLayout&#10;        android:id=&quot;@+id/main&quot;&#10;        android:layout_width=&quot;match_parent&quot;&#10;        android:layout_height=&quot;wrap_content&quot;&#10;        tools:context=&quot;.Trips&quot;&#10;        android:minHeight=&quot;match_parent&quot;&gt;&#10;&#10;        &lt;LinearLayout&#10;            android:id=&quot;@+id/layoutBack&quot;&#10;            android:layout_width=&quot;0dp&quot;&#10;            android:layout_height=&quot;wrap_content&quot;&#10;            android:orientation=&quot;horizontal&quot;&#10;            app:layout_constraintEnd_toEndOf=&quot;parent&quot;&#10;            app:layout_constraintStart_toStartOf=&quot;parent&quot;&#10;            app:layout_constraintTop_toTopOf=&quot;parent&quot;&#10;            android:padding=&quot;20dp&quot;&gt;&#10;&#10;            &lt;com.google.android.material.button.MaterialButton&#10;                android:id=&quot;@+id/btnBack&quot;&#10;                android:layout_width=&quot;wrap_content&quot;&#10;                android:layout_height=&quot;wrap_content&quot;&#10;&#10;                android:background=&quot;@drawable/button_shape&quot;&#10;                android:fontFamily=&quot;@font/inter_18pt&quot;&#10;                android:text=&quot;Back&quot;&#10;                android:textAllCaps=&quot;false&quot;&#10;                android:textSize=&quot;18sp&quot;&#10;                /&gt;&#10;&#10;            &lt;com.google.android.material.button.MaterialButton&#10;                android:id=&quot;@+id/btnDebugShowAll&quot;&#10;                android:layout_width=&quot;wrap_content&quot;&#10;                android:layout_height=&quot;wrap_content&quot;&#10;                android:background=&quot;@drawable/button_shape&quot;&#10;                android:fontFamily=&quot;@font/inter_18pt&quot;&#10;                android:text=&quot;Show All Trips&quot;&#10;                android:textAllCaps=&quot;false&quot;&#10;                android:textSize=&quot;14sp&quot;&#10;                android:layout_marginStart=&quot;10dp&quot;&#10;                /&gt;&#10;&#10;            &lt;com.google.android.material.button.MaterialButton&#10;                android:id=&quot;@+id/btnDebugInsertTest&quot;&#10;                android:layout_width=&quot;wrap_content&quot;&#10;                android:layout_height=&quot;wrap_content&quot;&#10;                android:background=&quot;@drawable/button_shape&quot;&#10;                android:fontFamily=&quot;@font/inter_18pt&quot;&#10;                android:text=&quot;Insert Test Trip&quot;&#10;                android:textAllCaps=&quot;false&quot;&#10;                android:textSize=&quot;12sp&quot;&#10;                android:layout_marginStart=&quot;10dp&quot;&#10;                /&gt;&#10;        &lt;/LinearLayout&gt;&#10;&#10;        &lt;TextView&#10;            android:id=&quot;@+id/textNoTrips&quot;&#10;            android:layout_width=&quot;wrap_content&quot;&#10;            android:layout_height=&quot;wrap_content&quot;&#10;            android:layout_marginTop=&quot;20dp&quot;&#10;            android:fontFamily=&quot;@font/inter_18pt_bold&quot;&#10;            android:text=&quot;No trips found&quot;&#10;            android:textSize=&quot;18sp&quot;&#10;            android:visibility=&quot;gone&quot;&#10;            app:layout_constraintEnd_toEndOf=&quot;parent&quot;&#10;            app:layout_constraintStart_toStartOf=&quot;parent&quot;&#10;            app:layout_constraintTop_toBottomOf=&quot;@+id/layoutBack&quot;&#10;            /&gt;&#10;&#10;        &lt;androidx.recyclerview.widget.RecyclerView&#10;            android:id=&quot;@+id/recyclerTrips&quot;&#10;            android:layout_width=&quot;0dp&quot;&#10;            android:layout_height=&quot;wrap_content&quot;&#10;            android:minHeight=&quot;400dp&quot;&#10;            app:layout_constraintTop_toBottomOf=&quot;@id/layoutBack&quot;&#10;            app:layout_constraintStart_toStartOf=&quot;parent&quot;&#10;            app:layout_constraintEnd_toEndOf=&quot;parent&quot;&#10;            app:layout_constraintBottom_toBottomOf=&quot;parent&quot;&#10;            android:padding=&quot;16dp&quot;&#10;            tools:listitem=&quot;@layout/item_trip&quot;/&gt;&#10;&#10;    &lt;/androidx.constraintlayout.widget.ConstraintLayout&gt;&#10;&#10;&lt;/ScrollView&gt;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/res/layout/fragment_trip.xml">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/res/layout/fragment_trip.xml" />
              <option name="originalContent" value="&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;&#10;&#10;&lt;!--&lt;LinearLayout--&gt;&#10;&lt;!--    android:layout_width=&quot;match_parent&quot;--&gt;&#10;&lt;!--    android:layout_height=&quot;wrap_content&quot;--&gt;&#10;&lt;!--    android:orientation=&quot;vertical&quot;&gt;--&gt;&#10;&lt;!--    --&gt;&#10;&lt;!--    --&gt;&#10;&lt;!--&lt;/LinearLayout&gt;--&gt;&#10;&#10;&lt;ScrollView&#10;    android:id=&quot;@+id/scrollView&quot;&#10;    android:layout_width=&quot;match_parent&quot;&#10;    android:layout_height=&quot;match_parent&quot;&#10;    xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;&#10;    xmlns:app=&quot;http://schemas.android.com/apk/res-auto&quot;&#10;    xmlns:tools=&quot;http://schemas.android.com/tools&quot;&gt;&#10;&#10;    &lt;androidx.constraintlayout.widget.ConstraintLayout xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;&#10;        xmlns:tools=&quot;http://schemas.android.com/tools&quot;&#10;        xmlns:app=&quot;http://schemas.android.com/apk/res-auto&quot;&#10;        android:layout_width=&quot;match_parent&quot;&#10;        android:layout_height=&quot;wrap_content&quot;&#10;        &gt;&#10;&#10;        &lt;TextView&#10;            android:id=&quot;@+id/galleryHeader&quot;&#10;            android:layout_width=&quot;0dp&quot;&#10;            android:layout_height=&quot;wrap_content&quot;&#10;            android:gravity=&quot;center&quot;&#10;            android:padding=&quot;16dp&quot;&#10;            android:text=&quot;Plan a Trip&quot;&#10;            android:fontFamily=&quot;@font/inter_18pt_bold&quot;&#10;            android:textSize=&quot;24sp&quot;&#10;            app:layout_constraintEnd_toEndOf=&quot;parent&quot;&#10;            app:layout_constraintStart_toStartOf=&quot;parent&quot;&#10;            app:layout_constraintTop_toTopOf=&quot;parent&quot; /&gt;&#10;&#10;        &lt;LinearLayout&#10;            android:id=&quot;@+id/layoutEdits&quot;&#10;            android:layout_width=&quot;match_parent&quot;&#10;            android:layout_height=&quot;wrap_content&quot;&#10;            android:orientation=&quot;vertical&quot;&#10;            android:layout_marginTop=&quot;30dp&quot;&#10;            android:paddingHorizontal=&quot;30dp&quot;&#10;            app:layout_constraintTop_toBottomOf=&quot;@id/galleryHeader&quot;&gt;&#10;&#10;            &lt;com.google.android.material.textfield.TextInputLayout&#10;                android:id=&quot;@+id/inputLayoutDestination&quot;&#10;                android:layout_width=&quot;match_parent&quot;&#10;                android:layout_height=&quot;wrap_content&quot;&#10;                style=&quot;@style/Widget.MaterialComponents.TextInputLayout.OutlinedBox&quot;&#10;                android:hint=&quot;Destination&quot;&#10;                android:layout_marginBottom=&quot;15dp&quot;&#10;                &gt;&#10;&#10;                &lt;com.google.android.material.textfield.TextInputEditText&#10;                    android:id=&quot;@+id/edtDestination&quot;&#10;                    android:layout_width=&quot;match_parent&quot;&#10;                    android:layout_height=&quot;wrap_content&quot;&#10;                    android:background=&quot;@drawable/edittext_home&quot;&#10;                    android:fontFamily=&quot;@font/inter_18pt_light&quot;&#10;                    android:inputType=&quot;textEmailAddress&quot;&#10;                    android:padding=&quot;10dp&quot;&#10;                    android:textSize=&quot;15sp&quot;&#10;                    /&gt;&#10;&#10;            &lt;/com.google.android.material.textfield.TextInputLayout&gt;&#10;&#10;&#10;&#10;&#10;            &lt;LinearLayout&#10;                android:layout_width=&quot;match_parent&quot;&#10;                android:layout_height=&quot;wrap_content&quot;&#10;                android:orientation=&quot;horizontal&quot;&#10;                android:layout_marginBottom=&quot;15dp&quot;&gt;&#10;&#10;&#10;                &lt;com.google.android.material.textfield.TextInputLayout&#10;                    android:id=&quot;@+id/inputLayoutDateStart&quot;&#10;                    android:layout_width=&quot;wrap_content&quot;&#10;                    android:layout_height=&quot;wrap_content&quot;&#10;                    style=&quot;@style/Widget.MaterialComponents.TextInputLayout.OutlinedBox&quot;&#10;                    android:hint=&quot;Start Date&quot;&#10;                    android:layout_weight=&quot;1&quot;&gt;&#10;&#10;                    &lt;com.google.android.material.textfield.TextInputEditText&#10;                        android:id=&quot;@+id/edtDateStart&quot;&#10;                        android:layout_width=&quot;match_parent&quot;&#10;                        android:layout_height=&quot;wrap_content&quot;&#10;                        android:background=&quot;@drawable/edittext_home&quot;&#10;                        android:gravity=&quot;center&quot;&#10;                        android:clickable=&quot;true&quot;&#10;                        android:textSize=&quot;15sp&quot;&#10;                        android:focusable=&quot;false&quot;&#10;                        android:inputType=&quot;none&quot;/&gt;&#10;                &lt;/com.google.android.material.textfield.TextInputLayout&gt;&#10;&#10;                &lt;TextView&#10;                    android:layout_width=&quot;wrap_content&quot;&#10;                    android:layout_height=&quot;match_parent&quot;&#10;                    android:text=&quot;to&quot;&#10;                    android:layout_gravity=&quot;center_horizontal&quot;&#10;                    android:layout_marginHorizontal=&quot;20dp&quot;&#10;                    android:gravity=&quot;center&quot;&#10;                    android:layout_weight=&quot;0.5&quot;/&gt;&#10;&#10;                &lt;com.google.android.material.textfield.TextInputLayout&#10;                    android:id=&quot;@+id/inputLayoutDateEnd&quot;&#10;                    android:layout_width=&quot;wrap_content&quot;&#10;                    android:layout_height=&quot;wrap_content&quot;&#10;                    style=&quot;@style/Widget.MaterialComponents.TextInputLayout.OutlinedBox&quot;&#10;                    android:hint=&quot;End Date&quot;&#10;                    android:layout_weight=&quot;1&quot;&gt;&#10;&#10;                    &lt;com.google.android.material.textfield.TextInputEditText&#10;                        android:id=&quot;@+id/edtDateEnd&quot;&#10;                        android:layout_width=&quot;match_parent&quot;&#10;                        android:layout_height=&quot;wrap_content&quot;&#10;                        android:background=&quot;@drawable/edittext_home&quot;&#10;                        android:gravity=&quot;center&quot;&#10;                        android:textSize=&quot;15sp&quot;&#10;                        android:focusable=&quot;false&quot;&#10;                        android:clickable=&quot;true&quot;&#10;                        android:inputType=&quot;none&quot;/&gt;&#10;                &lt;/com.google.android.material.textfield.TextInputLayout&gt;&#10;&#10;            &lt;/LinearLayout&gt;&#10;&#10;&#10;&#10;            &lt;LinearLayout&#10;                android:layout_width=&quot;match_parent&quot;&#10;                android:layout_height=&quot;wrap_content&quot;&#10;                android:orientation=&quot;horizontal&quot;&gt;&#10;&#10;                &lt;LinearLayout&#10;                    android:layout_width=&quot;0dp&quot;&#10;                    android:layout_height=&quot;wrap_content&quot;&#10;                    android:orientation=&quot;vertical&quot;&#10;                    android:layout_weight=&quot;1&quot;&#10;                    android:layout_marginEnd=&quot;50dp&quot;&gt;&#10;&#10;                    &lt;TextView&#10;                        android:layout_width=&quot;wrap_content&quot;&#10;                        android:layout_height=&quot;wrap_content&quot;&#10;                        android:text=&quot;Select activities:&quot;&#10;                        android:fontFamily=&quot;@font/inter_18pt_bold&quot;&#10;                        android:textSize=&quot;16sp&quot;&#10;                        /&gt;&#10;&#10;&#10;&#10;                        &lt;CheckBox&#10;                            android:id=&quot;@+id/checkHiking&quot;&#10;                            android:layout_width=&quot;wrap_content&quot;&#10;                            android:layout_height=&quot;30dp&quot;&#10;                            android:text=&quot;Hiking&quot;/&gt;&#10;&#10;                        &lt;CheckBox&#10;                            android:id=&quot;@+id/checkBus&quot;&#10;                            android:layout_width=&quot;wrap_content&quot;&#10;                            android:layout_height=&quot;30dp&quot;&#10;                            android:text=&quot;Bus ride&quot;/&gt;&#10;&#10;                        &lt;CheckBox&#10;                            android:id=&quot;@+id/checkSightseeing&quot;&#10;                            android:layout_width=&quot;wrap_content&quot;&#10;                            android:layout_height=&quot;30dp&quot;&#10;                            android:text=&quot;Sightseeing&quot;/&gt;&#10;&#10;                        &lt;CheckBox&#10;                            android:id=&quot;@+id/checkMuseum&quot;&#10;                            android:layout_width=&quot;wrap_content&quot;&#10;                            android:layout_height=&quot;30dp&quot;&#10;                            android:text=&quot;Museum&quot;/&gt;&#10;&#10;                &lt;/LinearLayout&gt;&#10;&#10;                &lt;com.google.android.material.textfield.TextInputLayout&#10;                    android:id=&quot;@+id/inputLayoutTravelExpenses&quot;&#10;                    android:layout_width=&quot;0dp&quot;&#10;                    android:layout_height=&quot;wrap_content&quot;&#10;                    android:layout_weight=&quot;1&quot;&#10;                    style=&quot;@style/Widget.MaterialComponents.TextInputLayout.OutlinedBox&quot;&#10;                    android:hint=&quot;Travel Expenses&quot;&#10;                    &gt;&#10;&#10;                    &lt;com.google.android.material.textfield.TextInputEditText&#10;                        android:id=&quot;@+id/edtTripExpenses&quot;&#10;                        android:layout_width=&quot;150dp&quot;&#10;                        android:layout_height=&quot;wrap_content&quot;&#10;                        android:background=&quot;@drawable/edittext_home&quot;&#10;                        android:fontFamily=&quot;@font/inter_18pt_light&quot;&#10;                        android:inputType=&quot;numberDecimal&quot;&#10;                        android:paddingVertical=&quot;10dp&quot;&#10;                        android:textSize=&quot;15sp&quot;&#10;                        /&gt;&#10;                &lt;/com.google.android.material.textfield.TextInputLayout&gt;&#10;&#10;&#10;&#10;            &lt;/LinearLayout&gt;&#10;&#10;&#10;            &lt;com.google.android.material.textfield.TextInputLayout&#10;                android:id=&quot;@+id/inputLayoutNotes&quot;&#10;                android:layout_width=&quot;match_parent&quot;&#10;                android:layout_height=&quot;wrap_content&quot;&#10;                android:hint=&quot;Trip notes&quot;&#10;                style=&quot;@style/Widget.MaterialComponents.TextInputLayout.OutlinedBox&quot;&#10;                android:layout_marginVertical=&quot;10dp&quot;&#10;                &gt;&#10;&#10;                &lt;com.google.android.material.textfield.TextInputEditText&#10;                    android:gravity=&quot;top|start&quot;&#10;                    android:scrollHorizontally=&quot;false&quot;&#10;                    android:id=&quot;@+id/edtNotes&quot;&#10;                    android:layout_width=&quot;match_parent&quot;&#10;                    android:layout_height=&quot;wrap_content&quot;&#10;                    android:inputType=&quot;textMultiLine&quot;&#10;                    android:minLines=&quot;1&quot;&#10;                    android:maxLines=&quot;5&quot;&#10;                    android:overScrollMode=&quot;ifContentScrolls&quot;&#10;                    android:scrollbars=&quot;vertical&quot;&#10;                    android:background=&quot;@drawable/edittext_home&quot;&#10;                    android:fontFamily=&quot;@font/inter_18pt_light&quot;&#10;                    android:padding=&quot;10dp&quot;&#10;                    android:textSize=&quot;15sp&quot;&#10;                    /&gt;&#10;&#10;            &lt;/com.google.android.material.textfield.TextInputLayout&gt;&#10;&#10;&#10;            &lt;LinearLayout&#10;                android:layout_width=&quot;match_parent&quot;&#10;                android:layout_height=&quot;wrap_content&quot;&#10;                android:orientation=&quot;horizontal&quot;&gt;&#10;&#10;                &lt;com.google.android.material.textfield.TextInputLayout&#10;                    android:id=&quot;@+id/inputLayoutCustomExpenses&quot;&#10;                    android:layout_width=&quot;0dp&quot;&#10;                    android:layout_height=&quot;wrap_content&quot;&#10;                    android:layout_marginEnd=&quot;10dp&quot;&#10;                    android:layout_weight=&quot;1&quot;&#10;                    android:hint=&quot;Custom Expenses&quot;&#10;                    style=&quot;@style/Widget.MaterialComponents.TextInputLayout.OutlinedBox&quot;&gt;&#10;&#10;                    &lt;com.google.android.material.textfield.TextInputEditText&#10;                        android:id=&quot;@+id/edtCustomExpenses&quot;&#10;                        android:layout_width=&quot;match_parent&quot;&#10;                        android:layout_height=&quot;wrap_content&quot;&#10;                        android:background=&quot;@drawable/edittext_home&quot;&#10;                        android:fontFamily=&quot;@font/inter_18pt_light&quot;&#10;                        android:inputType=&quot;numberDecimal&quot;&#10;                        android:padding=&quot;10dp&quot;&#10;                        android:textSize=&quot;15sp&quot;&#10;                        /&gt;&#10;&#10;                &lt;/com.google.android.material.textfield.TextInputLayout&gt;&#10;&#10;&#10;&#10;                &lt;com.google.android.material.textfield.TextInputLayout&#10;                    android:id=&quot;@+id/inputLayoutMealExpenses&quot;&#10;                    android:layout_width=&quot;0dp&quot;&#10;                    android:layout_height=&quot;wrap_content&quot;&#10;                    android:layout_marginStart=&quot;10dp&quot;&#10;                    android:layout_weight=&quot;1&quot;&#10;                    android:hint=&quot;Meal Expenses&quot;&#10;                    style=&quot;@style/Widget.MaterialComponents.TextInputLayout.OutlinedBox&quot;&gt;&#10;&#10;                    &lt;com.google.android.material.textfield.TextInputEditText&#10;                        android:id=&quot;@+id/edtMealExpenses&quot;&#10;                        android:layout_width=&quot;match_parent&quot;&#10;                        android:layout_height=&quot;wrap_content&quot;&#10;                        android:background=&quot;@drawable/edittext_home&quot;&#10;                        android:fontFamily=&quot;@font/inter_18pt_light&quot;&#10;                        android:inputType=&quot;numberDecimal&quot;&#10;                        android:padding=&quot;10dp&quot;&#10;                        android:textSize=&quot;15sp&quot;&#10;                        /&gt;&#10;&#10;                &lt;/com.google.android.material.textfield.TextInputLayout&gt;&#10;&#10;&lt;!--                &lt;com.google.android.material.textfield.TextInputEditText--&gt;&#10;&lt;!--                    android:id=&quot;@+id/edtMealExpenses&quot;--&gt;&#10;&lt;!--                    android:layout_width=&quot;0dp&quot;--&gt;&#10;&lt;!--                    android:layout_height=&quot;wrap_content&quot;--&gt;&#10;&#10;&lt;!--                    android:background=&quot;@drawable/edittext_home&quot;--&gt;&#10;&lt;!--                    android:hint=&quot;Meal Expenses&quot;--&gt;&#10;&lt;!--                    android:fontFamily=&quot;@font/inter_18pt_light&quot;--&gt;&#10;&lt;!--                    android:inputType=&quot;number&quot;--&gt;&#10;&lt;!--                    android:layout_weight=&quot;1&quot;--&gt;&#10;&lt;!--                    android:layout_marginTop=&quot;10dp&quot;--&gt;&#10;&lt;!--                    android:layout_marginStart=&quot;10dp&quot;--&gt;&#10;&lt;!--                    android:padding=&quot;10dp&quot;--&gt;&#10;&lt;!--                    android:textSize=&quot;15sp&quot;--&gt;&#10;&lt;!--                    android:textColor=&quot;@color/black&quot;--&gt;&#10;&lt;!--                    /&gt;--&gt;&#10;&#10;&#10;            &lt;/LinearLayout&gt;&#10;&#10;&#10;&#10;        &lt;/LinearLayout&gt;&#10;&#10;        &lt;TextView&#10;            android:id=&quot;@+id/textEstimates&quot;&#10;            android:layout_width=&quot;match_parent&quot;&#10;            android:layout_height=&quot;wrap_content&quot;&#10;            android:layout_marginHorizontal=&quot;30dp&quot;&#10;            android:layout_marginVertical=&quot;10dp&quot;&#10;            android:text=&quot;Travel expenses - $ \nActivity expenses - $ \nCustom expenses - $ \nMeal expenses - $ \n --------------------- \nTotal estimated cost - $&quot;&#10;&#10;            app:layout_constraintBottom_toTopOf=&quot;@+id/layoutButtons&quot;&#10;            app:layout_constraintTop_toBottomOf=&quot;@+id/layoutEdits&quot;/&gt;&#10;&#10;        &lt;LinearLayout&#10;            android:id=&quot;@+id/layoutButtons&quot;&#10;            android:layout_width=&quot;match_parent&quot;&#10;            android:layout_height=&quot;wrap_content&quot;&#10;            android:orientation=&quot;horizontal&quot;&#10;            android:paddingHorizontal=&quot;30dp&quot;&#10;            android:layout_marginTop=&quot;30dp&quot;&#10;&#10;            app:layout_constraintEnd_toEndOf=&quot;parent&quot;&#10;            app:layout_constraintStart_toStartOf=&quot;parent&quot;&#10;            app:layout_constraintTop_toBottomOf=&quot;@+id/textEstimates&quot;&gt;&#10;&#10;            &lt;com.google.android.material.button.MaterialButton&#10;                android:id=&quot;@+id/btnCalculate&quot;&#10;                android:layout_width=&quot;wrap_content&quot;&#10;                android:layout_height=&quot;wrap_content&quot;&#10;                android:background=&quot;@drawable/button_shape&quot;&#10;                android:textAllCaps=&quot;false&quot;&#10;                android:text=&quot;Calculate&quot;&#10;                android:layout_weight=&quot;1&quot;&#10;&#10;                app:layout_constraintEnd_toEndOf=&quot;parent&quot;&#10;                app:layout_constraintStart_toStartOf=&quot;parent&quot;&#10;                app:layout_constraintTop_toBottomOf=&quot;@+id/textEstimates&quot;/&gt;&#10;&#10;            &lt;Space&#10;                android:layout_width=&quot;0dp&quot;&#10;                android:layout_height=&quot;0dp&quot;&#10;                android:layout_weight=&quot;1&quot;/&gt;&#10;&#10;            &lt;com.google.android.material.button.MaterialButton&#10;                android:id=&quot;@+id/btnSave&quot;&#10;                android:layout_width=&quot;wrap_content&quot;&#10;                android:layout_height=&quot;wrap_content&quot;&#10;                android:background=&quot;@drawable/button_shape&quot;&#10;                android:enabled=&quot;false&quot;&#10;                android:textAllCaps=&quot;false&quot;&#10;                android:text=&quot;Save&quot;&#10;                android:layout_weight=&quot;1&quot;&#10;&#10;                app:layout_constraintEnd_toEndOf=&quot;parent&quot;&#10;                app:layout_constraintStart_toStartOf=&quot;parent&quot;&#10;                app:layout_constraintTop_toBottomOf=&quot;@+id/btnCalculate&quot;/&gt;&#10;        &lt;/LinearLayout&gt;&#10;&#10;&#10;&#10;    &lt;/androidx.constraintlayout.widget.ConstraintLayout&gt;&#10;&#10;&#10;&lt;/ScrollView&gt;&#10;" />
              <option name="updatedContent" value="&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;&#10;&#10;&lt;!--&lt;LinearLayout--&gt;&#10;&lt;!--    android:layout_width=&quot;match_parent&quot;--&gt;&#10;&lt;!--    android:layout_height=&quot;wrap_content&quot;--&gt;&#10;&lt;!--    android:orientation=&quot;vertical&quot;&gt;--&gt;&#10;&lt;!--    --&gt;&#10;&lt;!--    --&gt;&#10;&lt;!--&lt;/LinearLayout&gt;--&gt;&#10;&#10;&lt;ScrollView&#10;    android:id=&quot;@+id/scrollView&quot;&#10;    android:layout_width=&quot;match_parent&quot;&#10;    android:layout_height=&quot;match_parent&quot;&#10;    xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;&#10;    xmlns:app=&quot;http://schemas.android.com/apk/res-auto&quot;&#10;    xmlns:tools=&quot;http://schemas.android.com/tools&quot;&gt;&#10;&#10;    &lt;androidx.constraintlayout.widget.ConstraintLayout xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;&#10;        xmlns:tools=&quot;http://schemas.android.com/tools&quot;&#10;        xmlns:app=&quot;http://schemas.android.com/apk/res-auto&quot;&#10;        android:layout_width=&quot;match_parent&quot;&#10;        android:layout_height=&quot;wrap_content&quot;&#10;        &gt;&#10;&#10;        &lt;TextView&#10;            android:id=&quot;@+id/galleryHeader&quot;&#10;            android:layout_width=&quot;0dp&quot;&#10;            android:layout_height=&quot;wrap_content&quot;&#10;            android:gravity=&quot;center&quot;&#10;            android:padding=&quot;16dp&quot;&#10;            android:text=&quot;Plan a Trip&quot;&#10;            android:fontFamily=&quot;@font/inter_18pt_bold&quot;&#10;            android:textSize=&quot;24sp&quot;&#10;            app:layout_constraintEnd_toEndOf=&quot;parent&quot;&#10;            app:layout_constraintStart_toStartOf=&quot;parent&quot;&#10;            app:layout_constraintTop_toTopOf=&quot;parent&quot; /&gt;&#10;&#10;        &lt;LinearLayout&#10;            android:id=&quot;@+id/layoutEdits&quot;&#10;            android:layout_width=&quot;match_parent&quot;&#10;            android:layout_height=&quot;wrap_content&quot;&#10;            android:orientation=&quot;vertical&quot;&#10;            android:layout_marginTop=&quot;30dp&quot;&#10;            android:paddingHorizontal=&quot;30dp&quot;&#10;            app:layout_constraintTop_toBottomOf=&quot;@id/galleryHeader&quot;&gt;&#10;&#10;            &lt;com.google.android.material.textfield.TextInputLayout&#10;                android:id=&quot;@+id/inputLayoutDestination&quot;&#10;                android:layout_width=&quot;match_parent&quot;&#10;                android:layout_height=&quot;wrap_content&quot;&#10;                style=&quot;@style/Widget.MaterialComponents.TextInputLayout.OutlinedBox&quot;&#10;                android:hint=&quot;Destination&quot;&#10;                android:layout_marginBottom=&quot;15dp&quot;&#10;                &gt;&#10;&#10;                &lt;com.google.android.material.textfield.TextInputEditText&#10;                    android:id=&quot;@+id/edtDestination&quot;&#10;                    android:layout_width=&quot;match_parent&quot;&#10;                    android:layout_height=&quot;wrap_content&quot;&#10;                    android:background=&quot;@drawable/edittext_home&quot;&#10;                    android:fontFamily=&quot;@font/inter_18pt_light&quot;&#10;                    android:inputType=&quot;textEmailAddress&quot;&#10;                    android:padding=&quot;10dp&quot;&#10;                    android:textSize=&quot;15sp&quot;&#10;                    /&gt;&#10;&#10;            &lt;/com.google.android.material.textfield.TextInputLayout&gt;&#10;&#10;&#10;&#10;&#10;            &lt;LinearLayout&#10;                android:layout_width=&quot;match_parent&quot;&#10;                android:layout_height=&quot;wrap_content&quot;&#10;                android:orientation=&quot;horizontal&quot;&#10;                android:layout_marginBottom=&quot;15dp&quot;&gt;&#10;&#10;&#10;                &lt;com.google.android.material.textfield.TextInputLayout&#10;                    android:id=&quot;@+id/inputLayoutDateStart&quot;&#10;                    android:layout_width=&quot;wrap_content&quot;&#10;                    android:layout_height=&quot;wrap_content&quot;&#10;                    style=&quot;@style/Widget.MaterialComponents.TextInputLayout.OutlinedBox&quot;&#10;                    android:hint=&quot;Start Date&quot;&#10;                    android:layout_weight=&quot;1&quot;&gt;&#10;&#10;                    &lt;com.google.android.material.textfield.TextInputEditText&#10;                        android:id=&quot;@+id/edtDateStart&quot;&#10;                        android:layout_width=&quot;match_parent&quot;&#10;                        android:layout_height=&quot;wrap_content&quot;&#10;                        android:background=&quot;@drawable/edittext_home&quot;&#10;                        android:gravity=&quot;center&quot;&#10;                        android:clickable=&quot;true&quot;&#10;                        android:textSize=&quot;15sp&quot;&#10;                        android:focusable=&quot;false&quot;&#10;                        android:inputType=&quot;none&quot;/&gt;&#10;                &lt;/com.google.android.material.textfield.TextInputLayout&gt;&#10;&#10;                &lt;TextView&#10;                    android:layout_width=&quot;wrap_content&quot;&#10;                    android:layout_height=&quot;match_parent&quot;&#10;                    android:text=&quot;to&quot;&#10;                    android:layout_gravity=&quot;center_horizontal&quot;&#10;                    android:layout_marginHorizontal=&quot;20dp&quot;&#10;                    android:gravity=&quot;center&quot;&#10;                    android:layout_weight=&quot;0.5&quot;/&gt;&#10;&#10;                &lt;com.google.android.material.textfield.TextInputLayout&#10;                    android:id=&quot;@+id/inputLayoutDateEnd&quot;&#10;                    android:layout_width=&quot;wrap_content&quot;&#10;                    android:layout_height=&quot;wrap_content&quot;&#10;                    style=&quot;@style/Widget.MaterialComponents.TextInputLayout.OutlinedBox&quot;&#10;                    android:hint=&quot;End Date&quot;&#10;                    android:layout_weight=&quot;1&quot;&gt;&#10;&#10;                    &lt;com.google.android.material.textfield.TextInputEditText&#10;                        android:id=&quot;@+id/edtDateEnd&quot;&#10;                        android:layout_width=&quot;match_parent&quot;&#10;                        android:layout_height=&quot;wrap_content&quot;&#10;                        android:background=&quot;@drawable/edittext_home&quot;&#10;                        android:gravity=&quot;center&quot;&#10;                        android:textSize=&quot;15sp&quot;&#10;                        android:focusable=&quot;false&quot;&#10;                        android:clickable=&quot;true&quot;&#10;                        android:inputType=&quot;none&quot;/&gt;&#10;                &lt;/com.google.android.material.textfield.TextInputLayout&gt;&#10;&#10;            &lt;/LinearLayout&gt;&#10;&#10;&#10;&#10;            &lt;LinearLayout&#10;                android:layout_width=&quot;match_parent&quot;&#10;                android:layout_height=&quot;wrap_content&quot;&#10;                android:orientation=&quot;horizontal&quot;&gt;&#10;&#10;                &lt;LinearLayout&#10;                    android:layout_width=&quot;0dp&quot;&#10;                    android:layout_height=&quot;wrap_content&quot;&#10;                    android:orientation=&quot;vertical&quot;&#10;                    android:layout_weight=&quot;1&quot;&#10;                    android:layout_marginEnd=&quot;50dp&quot;&gt;&#10;&#10;                    &lt;TextView&#10;                        android:layout_width=&quot;wrap_content&quot;&#10;                        android:layout_height=&quot;wrap_content&quot;&#10;                        android:text=&quot;Select activities:&quot;&#10;                        android:fontFamily=&quot;@font/inter_18pt_bold&quot;&#10;                        android:textSize=&quot;16sp&quot;&#10;                        /&gt;&#10;&#10;&#10;&#10;                        &lt;CheckBox&#10;                            android:id=&quot;@+id/checkHiking&quot;&#10;                            android:layout_width=&quot;wrap_content&quot;&#10;                            android:layout_height=&quot;30dp&quot;&#10;                            android:text=&quot;Hiking&quot;/&gt;&#10;&#10;                        &lt;CheckBox&#10;                            android:id=&quot;@+id/checkBus&quot;&#10;                            android:layout_width=&quot;wrap_content&quot;&#10;                            android:layout_height=&quot;30dp&quot;&#10;                            android:text=&quot;Bus ride&quot;/&gt;&#10;&#10;                        &lt;CheckBox&#10;                            android:id=&quot;@+id/checkSightseeing&quot;&#10;                            android:layout_width=&quot;wrap_content&quot;&#10;                            android:layout_height=&quot;30dp&quot;&#10;                            android:text=&quot;Sightseeing&quot;/&gt;&#10;&#10;                        &lt;CheckBox&#10;                            android:id=&quot;@+id/checkMuseum&quot;&#10;                            android:layout_width=&quot;wrap_content&quot;&#10;                            android:layout_height=&quot;30dp&quot;&#10;                            android:text=&quot;Museum&quot;/&gt;&#10;&#10;                &lt;/LinearLayout&gt;&#10;&#10;                &lt;com.google.android.material.textfield.TextInputLayout&#10;                    android:id=&quot;@+id/inputLayoutTravelExpenses&quot;&#10;                    android:layout_width=&quot;0dp&quot;&#10;                    android:layout_height=&quot;wrap_content&quot;&#10;                    android:layout_weight=&quot;1&quot;&#10;                    style=&quot;@style/Widget.MaterialComponents.TextInputLayout.OutlinedBox&quot;&#10;                    android:hint=&quot;Travel Expenses&quot;&#10;                    &gt;&#10;&#10;                    &lt;com.google.android.material.textfield.TextInputEditText&#10;                        android:id=&quot;@+id/edtTripExpenses&quot;&#10;                        android:layout_width=&quot;150dp&quot;&#10;                        android:layout_height=&quot;wrap_content&quot;&#10;                        android:background=&quot;@drawable/edittext_home&quot;&#10;                        android:fontFamily=&quot;@font/inter_18pt_light&quot;&#10;                        android:inputType=&quot;numberDecimal&quot;&#10;                        android:paddingVertical=&quot;10dp&quot;&#10;                        android:textSize=&quot;15sp&quot;&#10;                        /&gt;&#10;                &lt;/com.google.android.material.textfield.TextInputLayout&gt;&#10;&#10;&#10;&#10;            &lt;/LinearLayout&gt;&#10;&#10;&#10;            &lt;com.google.android.material.textfield.TextInputLayout&#10;                android:id=&quot;@+id/inputLayoutNotes&quot;&#10;                android:layout_width=&quot;match_parent&quot;&#10;                android:layout_height=&quot;wrap_content&quot;&#10;                android:hint=&quot;Trip notes&quot;&#10;                style=&quot;@style/Widget.MaterialComponents.TextInputLayout.OutlinedBox&quot;&#10;                android:layout_marginVertical=&quot;10dp&quot;&#10;                &gt;&#10;&#10;                &lt;com.google.android.material.textfield.TextInputEditText&#10;                    android:gravity=&quot;top|start&quot;&#10;                    android:scrollHorizontally=&quot;false&quot;&#10;                    android:id=&quot;@+id/edtNotes&quot;&#10;                    android:layout_width=&quot;match_parent&quot;&#10;                    android:layout_height=&quot;wrap_content&quot;&#10;                    android:inputType=&quot;textMultiLine&quot;&#10;                    android:minLines=&quot;1&quot;&#10;                    android:maxLines=&quot;5&quot;&#10;                    android:overScrollMode=&quot;ifContentScrolls&quot;&#10;                    android:scrollbars=&quot;vertical&quot;&#10;                    android:background=&quot;@drawable/edittext_home&quot;&#10;                    android:fontFamily=&quot;@font/inter_18pt_light&quot;&#10;                    android:padding=&quot;10dp&quot;&#10;                    android:textSize=&quot;15sp&quot;&#10;                    /&gt;&#10;&#10;            &lt;/com.google.android.material.textfield.TextInputLayout&gt;&#10;&#10;&#10;            &lt;LinearLayout&#10;                android:layout_width=&quot;match_parent&quot;&#10;                android:layout_height=&quot;wrap_content&quot;&#10;                android:orientation=&quot;horizontal&quot;&gt;&#10;&#10;                &lt;com.google.android.material.textfield.TextInputLayout&#10;                    android:id=&quot;@+id/inputLayoutCustomExpenses&quot;&#10;                    android:layout_width=&quot;0dp&quot;&#10;                    android:layout_height=&quot;wrap_content&quot;&#10;                    android:layout_marginEnd=&quot;10dp&quot;&#10;                    android:layout_weight=&quot;1&quot;&#10;                    android:hint=&quot;Custom Expenses&quot;&#10;                    style=&quot;@style/Widget.MaterialComponents.TextInputLayout.OutlinedBox&quot;&gt;&#10;&#10;                    &lt;com.google.android.material.textfield.TextInputEditText&#10;                        android:id=&quot;@+id/edtCustomExpenses&quot;&#10;                        android:layout_width=&quot;match_parent&quot;&#10;                        android:layout_height=&quot;wrap_content&quot;&#10;                        android:background=&quot;@drawable/edittext_home&quot;&#10;                        android:fontFamily=&quot;@font/inter_18pt_light&quot;&#10;                        android:inputType=&quot;numberDecimal&quot;&#10;                        android:padding=&quot;10dp&quot;&#10;                        android:textSize=&quot;15sp&quot;&#10;                        /&gt;&#10;&#10;                &lt;/com.google.android.material.textfield.TextInputLayout&gt;&#10;&#10;&#10;&#10;                &lt;com.google.android.material.textfield.TextInputLayout&#10;                    android:id=&quot;@+id/inputLayoutMealExpenses&quot;&#10;                    android:layout_width=&quot;0dp&quot;&#10;                    android:layout_height=&quot;wrap_content&quot;&#10;                    android:layout_marginStart=&quot;10dp&quot;&#10;                    android:layout_weight=&quot;1&quot;&#10;                    android:hint=&quot;Meal Expenses&quot;&#10;                    style=&quot;@style/Widget.MaterialComponents.TextInputLayout.OutlinedBox&quot;&gt;&#10;&#10;                    &lt;com.google.android.material.textfield.TextInputEditText&#10;                        android:id=&quot;@+id/edtMealExpenses&quot;&#10;                        android:layout_width=&quot;match_parent&quot;&#10;                        android:layout_height=&quot;wrap_content&quot;&#10;                        android:background=&quot;@drawable/edittext_home&quot;&#10;                        android:fontFamily=&quot;@font/inter_18pt_light&quot;&#10;                        android:inputType=&quot;numberDecimal&quot;&#10;                        android:padding=&quot;10dp&quot;&#10;                        android:textSize=&quot;15sp&quot;&#10;                        /&gt;&#10;&#10;                &lt;/com.google.android.material.textfield.TextInputLayout&gt;&#10;&#10;&lt;!--                &lt;com.google.android.material.textfield.TextInputEditText--&gt;&#10;&lt;!--                    android:id=&quot;@+id/edtMealExpenses&quot;--&gt;&#10;&lt;!--                    android:layout_width=&quot;0dp&quot;--&gt;&#10;&lt;!--                    android:layout_height=&quot;wrap_content&quot;--&gt;&#10;&#10;&lt;!--                    android:background=&quot;@drawable/edittext_home&quot;--&gt;&#10;&lt;!--                    android:hint=&quot;Meal Expenses&quot;--&gt;&#10;&lt;!--                    android:fontFamily=&quot;@font/inter_18pt_light&quot;--&gt;&#10;&lt;!--                    android:inputType=&quot;number&quot;--&gt;&#10;&lt;!--                    android:layout_weight=&quot;1&quot;--&gt;&#10;&lt;!--                    android:layout_marginTop=&quot;10dp&quot;--&gt;&#10;&lt;!--                    android:layout_marginStart=&quot;10dp&quot;--&gt;&#10;&lt;!--                    android:padding=&quot;10dp&quot;--&gt;&#10;&lt;!--                    android:textSize=&quot;15sp&quot;--&gt;&#10;&lt;!--                    android:textColor=&quot;@color/black&quot;--&gt;&#10;&lt;!--                    /&gt;--&gt;&#10;&#10;&#10;            &lt;/LinearLayout&gt;&#10;&#10;&#10;&#10;        &lt;/LinearLayout&gt;&#10;&#10;        &lt;TextView&#10;            android:id=&quot;@+id/textEstimates&quot;&#10;            android:layout_width=&quot;match_parent&quot;&#10;            android:layout_height=&quot;wrap_content&quot;&#10;            android:layout_marginHorizontal=&quot;30dp&quot;&#10;            android:layout_marginVertical=&quot;10dp&quot;&#10;            android:text=&quot;Travel expenses - $ \nActivity expenses - $ \nCustom expenses - $ \nMeal expenses - $ \n --------------------- \nTotal estimated cost - $&quot;&#10;&#10;            app:layout_constraintBottom_toTopOf=&quot;@+id/layoutButtons&quot;&#10;            app:layout_constraintTop_toBottomOf=&quot;@+id/layoutEdits&quot;/&gt;&#10;&#10;        &lt;LinearLayout&#10;            android:id=&quot;@+id/layoutButtons&quot;&#10;            android:layout_width=&quot;match_parent&quot;&#10;            android:layout_height=&quot;wrap_content&quot;&#10;            android:orientation=&quot;horizontal&quot;&#10;            android:paddingHorizontal=&quot;30dp&quot;&#10;            android:layout_marginTop=&quot;30dp&quot;&#10;&#10;            app:layout_constraintEnd_toEndOf=&quot;parent&quot;&#10;            app:layout_constraintStart_toStartOf=&quot;parent&quot;&#10;            app:layout_constraintTop_toBottomOf=&quot;@+id/textEstimates&quot;&gt;&#10;&#10;            &lt;com.google.android.material.button.MaterialButton&#10;                android:id=&quot;@+id/btnCalculate&quot;&#10;                android:layout_width=&quot;wrap_content&quot;&#10;                android:layout_height=&quot;wrap_content&quot;&#10;                android:background=&quot;@drawable/button_shape&quot;&#10;                android:textAllCaps=&quot;false&quot;&#10;                android:text=&quot;Calculate&quot;&#10;                android:layout_weight=&quot;1&quot;&#10;&#10;                app:layout_constraintEnd_toEndOf=&quot;parent&quot;&#10;                app:layout_constraintStart_toStartOf=&quot;parent&quot;&#10;                app:layout_constraintTop_toBottomOf=&quot;@+id/textEstimates&quot;/&gt;&#10;&#10;            &lt;Space&#10;                android:layout_width=&quot;0dp&quot;&#10;                android:layout_height=&quot;0dp&quot;&#10;                android:layout_weight=&quot;1&quot;/&gt;&#10;&#10;            &lt;com.google.android.material.button.MaterialButton&#10;                android:id=&quot;@+id/btnSave&quot;&#10;                android:layout_width=&quot;wrap_content&quot;&#10;                android:layout_height=&quot;wrap_content&quot;&#10;                android:background=&quot;@drawable/button_shape&quot;&#10;                android:enabled=&quot;false&quot;&#10;                android:textAllCaps=&quot;false&quot;&#10;                android:text=&quot;Save&quot;&#10;                android:layout_weight=&quot;1&quot;&#10;&#10;                app:layout_constraintEnd_toEndOf=&quot;parent&quot;&#10;                app:layout_constraintStart_toStartOf=&quot;parent&quot;&#10;                app:layout_constraintTop_toBottomOf=&quot;@+id/btnCalculate&quot;/&gt;&#10;        &lt;/LinearLayout&gt;&#10;&#10;&#10;&#10;    &lt;/androidx.constraintlayout.widget.ConstraintLayout&gt;&#10;&#10;&#10;&lt;/ScrollView&gt;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/res/layout/item_gallery.xml">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/res/layout/item_gallery.xml" />
              <option name="originalContent" value="&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;&#10;&lt;androidx.cardview.widget.CardView xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;&#10;    xmlns:app=&quot;http://schemas.android.com/apk/res-auto&quot;&#10;    android:layout_width=&quot;match_parent&quot;&#10;    android:layout_height=&quot;wrap_content&quot;&#10;    android:layout_margin=&quot;4dp&quot;&#10;    app:cardCornerRadius=&quot;12dp&quot;&#10;    app:cardElevation=&quot;4dp&quot;&gt;&#10;&#10;    &lt;LinearLayout&#10;        android:layout_width=&quot;match_parent&quot;&#10;        android:layout_height=&quot;wrap_content&quot;&#10;        android:orientation=&quot;vertical&quot;&gt;&#10;&#10;        &lt;ImageView&#10;            android:id=&quot;@+id/imageMemory&quot;&#10;            android:layout_width=&quot;match_parent&quot;&#10;            android:layout_height=&quot;120dp&quot;&#10;            android:scaleType=&quot;centerCrop&quot;&#10;            android:background=&quot;@color/gray_300&quot;&#10;            android:contentDescription=&quot;Memory Image&quot; /&gt;&#10;&#10;        &lt;LinearLayout&#10;            android:layout_width=&quot;match_parent&quot;&#10;            android:layout_height=&quot;wrap_content&quot;&#10;            android:orientation=&quot;vertical&quot;&#10;            android:padding=&quot;12dp&quot;&gt;&#10;&#10;            &lt;TextView&#10;                android:id=&quot;@+id/textMemoryTitle&quot;&#10;                android:layout_width=&quot;match_parent&quot;&#10;                android:layout_height=&quot;wrap_content&quot;&#10;                android:text=&quot;Memory Title&quot;&#10;                android:textStyle=&quot;bold&quot;&#10;                android:textSize=&quot;16sp&quot;&#10;                android:textColor=&quot;@color/black&quot;&#10;                android:maxLines=&quot;1&quot;&#10;                android:ellipsize=&quot;end&quot;/&gt;&#10;&#10;            &lt;TextView&#10;                android:id=&quot;@+id/textMemoryDate&quot;&#10;                android:layout_width=&quot;match_parent&quot;&#10;                android:layout_height=&quot;wrap_content&quot;&#10;                android:text=&quot;Date&quot;&#10;                android:textSize=&quot;12sp&quot;&#10;                android:textColor=&quot;@color/gray_600&quot;&#10;                android:layout_marginTop=&quot;4dp&quot;/&gt;&#10;&#10;            &lt;TextView&#10;                android:id=&quot;@+id/textMemoryDescription&quot;&#10;                android:layout_width=&quot;match_parent&quot;&#10;                android:layout_height=&quot;wrap_content&quot;&#10;                android:text=&quot;Description&quot;&#10;                android:textSize=&quot;14sp&quot;&#10;                android:textColor=&quot;@color/black&quot;&#10;                android:layout_marginTop=&quot;4dp&quot;&#10;                android:maxLines=&quot;2&quot;&#10;                android:ellipsize=&quot;end&quot;/&gt;&#10;&#10;            &lt;LinearLayout&#10;                android:layout_width=&quot;match_parent&quot;&#10;                android:layout_height=&quot;wrap_content&quot;&#10;                android:orientation=&quot;horizontal&quot;&#10;                android:layout_marginTop=&quot;8dp&quot;&#10;                android:gravity=&quot;center_vertical&quot;&gt;&#10;&#10;                &lt;ImageView&#10;                    android:id=&quot;@+id/iconMusic&quot;&#10;                    android:layout_width=&quot;16dp&quot;&#10;                    android:layout_height=&quot;16dp&quot;&#10;                    android:src=&quot;@android:drawable/ic_media_play&quot;&#10;                    android:visibility=&quot;gone&quot;&#10;                    android:contentDescription=&quot;Has Audio&quot;/&gt;&#10;&#10;                &lt;TextView&#10;                    android:id=&quot;@+id/textHasAudio&quot;&#10;                    android:layout_width=&quot;wrap_content&quot;&#10;                    android:layout_height=&quot;wrap_content&quot;&#10;                    android:text=&quot;♪ Audio&quot;&#10;                    android:textSize=&quot;10sp&quot;&#10;                    android:textColor=&quot;@color/gray_600&quot;&#10;                    android:layout_marginStart=&quot;4dp&quot;&#10;                    android:visibility=&quot;gone&quot;/&gt;&#10;&#10;                &lt;Space&#10;                    android:layout_width=&quot;0dp&quot;&#10;                    android:layout_height=&quot;wrap_content&quot;&#10;                    android:layout_weight=&quot;1&quot;/&gt;&#10;&#10;                &lt;!-- Audio Control Buttons --&gt;&#10;                &lt;ImageButton&#10;                    android:id=&quot;@+id/btnPlay&quot;&#10;                    android:layout_width=&quot;32dp&quot;&#10;                    android:layout_height=&quot;32dp&quot;&#10;                    android:src=&quot;@android:drawable/ic_media_play&quot;&#10;                    android:background=&quot;?android:attr/selectableItemBackgroundBorderless&quot;&#10;                    android:contentDescription=&quot;Play Audio&quot;&#10;                    android:visibility=&quot;gone&quot;&#10;                    android:scaleType=&quot;centerInside&quot;&#10;                    android:padding=&quot;4dp&quot;/&gt;&#10;&#10;                &lt;ImageButton&#10;                    android:id=&quot;@+id/btnPause&quot;&#10;                    android:layout_width=&quot;32dp&quot;&#10;                    android:layout_height=&quot;32dp&quot;&#10;                    android:src=&quot;@android:drawable/ic_media_pause&quot;&#10;                    android:background=&quot;?android:attr/selectableItemBackgroundBorderless&quot;&#10;                    android:contentDescription=&quot;Pause Audio&quot;&#10;                    android:visibility=&quot;gone&quot;&#10;                    android:scaleType=&quot;centerInside&quot;&#10;                    android:padding=&quot;4dp&quot;/&gt;&#10;&#10;            &lt;/LinearLayout&gt;&#10;&#10;        &lt;/LinearLayout&gt;&#10;&#10;    &lt;/LinearLayout&gt;&#10;&#10;&lt;/androidx.cardview.widget.CardView&gt;&#10;" />
              <option name="updatedContent" value="&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;&#10;&lt;androidx.cardview.widget.CardView xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;&#10;    xmlns:app=&quot;http://schemas.android.com/apk/res-auto&quot;&#10;    android:layout_width=&quot;match_parent&quot;&#10;    android:layout_height=&quot;wrap_content&quot;&#10;    android:layout_margin=&quot;4dp&quot;&#10;    app:cardCornerRadius=&quot;12dp&quot;&#10;    app:cardElevation=&quot;4dp&quot;&gt;&#10;&#10;    &lt;LinearLayout&#10;        android:layout_width=&quot;match_parent&quot;&#10;        android:layout_height=&quot;wrap_content&quot;&#10;        android:orientation=&quot;vertical&quot;&gt;&#10;&#10;        &lt;ImageView&#10;            android:id=&quot;@+id/imageMemory&quot;&#10;            android:layout_width=&quot;match_parent&quot;&#10;            android:layout_height=&quot;120dp&quot;&#10;            android:scaleType=&quot;centerCrop&quot;&#10;            android:background=&quot;@color/gray_300&quot;&#10;            android:contentDescription=&quot;Memory Image&quot; /&gt;&#10;&#10;        &lt;LinearLayout&#10;            android:layout_width=&quot;match_parent&quot;&#10;            android:layout_height=&quot;wrap_content&quot;&#10;            android:orientation=&quot;vertical&quot;&#10;            android:padding=&quot;12dp&quot;&gt;&#10;&#10;            &lt;TextView&#10;                android:id=&quot;@+id/textMemoryTitle&quot;&#10;                android:layout_width=&quot;match_parent&quot;&#10;                android:layout_height=&quot;wrap_content&quot;&#10;                android:text=&quot;Memory Title&quot;&#10;                android:textStyle=&quot;bold&quot;&#10;                android:textSize=&quot;16sp&quot;&#10;                android:textColor=&quot;@color/black&quot;&#10;                android:maxLines=&quot;1&quot;&#10;                android:ellipsize=&quot;end&quot;/&gt;&#10;&#10;            &lt;TextView&#10;                android:id=&quot;@+id/textMemoryDate&quot;&#10;                android:layout_width=&quot;match_parent&quot;&#10;                android:layout_height=&quot;wrap_content&quot;&#10;                android:text=&quot;Date&quot;&#10;                android:textSize=&quot;12sp&quot;&#10;                android:textColor=&quot;@color/gray_600&quot;&#10;                android:layout_marginTop=&quot;4dp&quot;/&gt;&#10;&#10;            &lt;TextView&#10;                android:id=&quot;@+id/textMemoryDescription&quot;&#10;                android:layout_width=&quot;match_parent&quot;&#10;                android:layout_height=&quot;wrap_content&quot;&#10;                android:text=&quot;Description&quot;&#10;                android:textSize=&quot;14sp&quot;&#10;                android:textColor=&quot;@color/black&quot;&#10;                android:layout_marginTop=&quot;4dp&quot;&#10;                android:maxLines=&quot;2&quot;&#10;                android:ellipsize=&quot;end&quot;/&gt;&#10;&#10;            &lt;LinearLayout&#10;                android:layout_width=&quot;match_parent&quot;&#10;                android:layout_height=&quot;wrap_content&quot;&#10;                android:orientation=&quot;horizontal&quot;&#10;                android:layout_marginTop=&quot;8dp&quot;&#10;                android:gravity=&quot;center_vertical&quot;&gt;&#10;&#10;                &lt;ImageView&#10;                    android:id=&quot;@+id/iconMusic&quot;&#10;                    android:layout_width=&quot;16dp&quot;&#10;                    android:layout_height=&quot;16dp&quot;&#10;                    android:src=&quot;@android:drawable/ic_media_play&quot;&#10;                    android:visibility=&quot;gone&quot;&#10;                    android:contentDescription=&quot;Has Audio&quot;/&gt;&#10;&#10;                &lt;TextView&#10;                    android:id=&quot;@+id/textHasAudio&quot;&#10;                    android:layout_width=&quot;wrap_content&quot;&#10;                    android:layout_height=&quot;wrap_content&quot;&#10;                    android:text=&quot;♪ Audio&quot;&#10;                    android:textSize=&quot;10sp&quot;&#10;                    android:textColor=&quot;@color/gray_600&quot;&#10;                    android:layout_marginStart=&quot;4dp&quot;&#10;                    android:visibility=&quot;gone&quot;/&gt;&#10;&#10;                &lt;Space&#10;                    android:layout_width=&quot;0dp&quot;&#10;                    android:layout_height=&quot;wrap_content&quot;&#10;                    android:layout_weight=&quot;1&quot;/&gt;&#10;&#10;                &lt;!-- Audio Control Buttons --&gt;&#10;                &lt;ImageButton&#10;                    android:id=&quot;@+id/btnPlay&quot;&#10;                    android:layout_width=&quot;32dp&quot;&#10;                    android:layout_height=&quot;32dp&quot;&#10;                    android:src=&quot;@android:drawable/ic_media_play&quot;&#10;                    android:background=&quot;?android:attr/selectableItemBackgroundBorderless&quot;&#10;                    android:contentDescription=&quot;Play Audio&quot;&#10;                    android:visibility=&quot;gone&quot;&#10;                    android:scaleType=&quot;centerInside&quot;&#10;                    android:padding=&quot;4dp&quot;/&gt;&#10;&#10;                &lt;ImageButton&#10;                    android:id=&quot;@+id/btnPause&quot;&#10;                    android:layout_width=&quot;32dp&quot;&#10;                    android:layout_height=&quot;32dp&quot;&#10;                    android:src=&quot;@android:drawable/ic_media_pause&quot;&#10;                    android:background=&quot;?android:attr/selectableItemBackgroundBorderless&quot;&#10;                    android:contentDescription=&quot;Pause Audio&quot;&#10;                    android:visibility=&quot;gone&quot;&#10;                    android:scaleType=&quot;centerInside&quot;&#10;                    android:padding=&quot;4dp&quot;/&gt;&#10;&#10;            &lt;/LinearLayout&gt;&#10;&#10;        &lt;/LinearLayout&gt;&#10;&#10;    &lt;/LinearLayout&gt;&#10;&#10;&lt;/androidx.cardview.widget.CardView&gt;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/res/layout/item_trip.xml">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/res/layout/item_trip.xml" />
              <option name="originalContent" value="&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;&#10;&lt;androidx.cardview.widget.CardView xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;&#10;    xmlns:app=&quot;http://schemas.android.com/apk/res-auto&quot;&#10;    android:layout_width=&quot;match_parent&quot;&#10;    android:layout_height=&quot;wrap_content&quot;&#10;    android:layout_marginBottom=&quot;12dp&quot;&#10;    app:cardCornerRadius=&quot;12dp&quot;&#10;    app:cardElevation=&quot;4dp&quot;&gt;&#10;&#10;    &lt;LinearLayout&#10;        android:layout_width=&quot;match_parent&quot;&#10;        android:layout_height=&quot;wrap_content&quot;&#10;        android:orientation=&quot;vertical&quot;&#10;        android:padding=&quot;16dp&quot;&gt;&#10;&#10;        &lt;TextView&#10;            android:id=&quot;@+id/textDestination&quot;&#10;            android:layout_width=&quot;wrap_content&quot;&#10;            android:layout_height=&quot;wrap_content&quot;&#10;            android:text=&quot;Destination&quot;&#10;            android:textStyle=&quot;bold&quot;&#10;            android:textSize=&quot;18sp&quot;&#10;            android:textColor=&quot;@color/black&quot;/&gt;&#10;&#10;        &lt;TextView&#10;            android:id=&quot;@+id/textDates&quot;&#10;            android:layout_width=&quot;wrap_content&quot;&#10;            android:layout_height=&quot;wrap_content&quot;&#10;            android:text=&quot;Dates&quot;&#10;            android:textSize=&quot;14sp&quot;&#10;            android:textColor=&quot;@color/black&quot;&#10;            android:layout_marginTop=&quot;4dp&quot;/&gt;&#10;&#10;        &lt;TextView&#10;            android:id=&quot;@+id/textActivities&quot;&#10;            android:layout_width=&quot;wrap_content&quot;&#10;            android:layout_height=&quot;wrap_content&quot;&#10;            android:text=&quot;Activities&quot;&#10;            android:textSize=&quot;14sp&quot;&#10;            android:textColor=&quot;@color/black&quot;&#10;            android:layout_marginTop=&quot;4dp&quot;/&gt;&#10;&#10;        &lt;TextView&#10;            android:id=&quot;@+id/textExpenses&quot;&#10;            android:layout_width=&quot;wrap_content&quot;&#10;            android:layout_height=&quot;wrap_content&quot;&#10;            android:text=&quot;Expenses&quot;&#10;            android:textSize=&quot;14sp&quot;&#10;            android:textColor=&quot;@color/black&quot;&#10;            android:layout_marginTop=&quot;4dp&quot;/&gt;&#10;&#10;        &lt;!-- Discount Information Section --&gt;&#10;        &lt;LinearLayout&#10;            android:id=&quot;@+id/layoutDiscount&quot;&#10;            android:layout_width=&quot;match_parent&quot;&#10;            android:layout_height=&quot;wrap_content&quot;&#10;            android:orientation=&quot;horizontal&quot;&#10;            android:layout_marginTop=&quot;6dp&quot;&#10;            android:padding=&quot;8dp&quot;&#10;            android:background=&quot;@drawable/button_shape&quot;&#10;            android:visibility=&quot;gone&quot;&gt;&#10;&#10;            &lt;TextView&#10;                android:layout_width=&quot;wrap_content&quot;&#10;                android:layout_height=&quot;wrap_content&quot;&#10;                android:text=&quot;&quot;&#10;                android:textSize=&quot;16sp&quot;&#10;                android:layout_marginEnd=&quot;8dp&quot;/&gt;&#10;&#10;            &lt;TextView&#10;                android:id=&quot;@+id/textDiscount&quot;&#10;                android:layout_width=&quot;0dp&quot;&#10;                android:layout_height=&quot;wrap_content&quot;&#10;                android:layout_weight=&quot;1&quot;&#10;                android:text=&quot;10% Discount Applied!&quot;&#10;                android:textSize=&quot;12sp&quot;&#10;                android:textStyle=&quot;bold&quot;&#10;                android:textColor=&quot;@color/white&quot;/&gt;&#10;&#10;            &lt;TextView&#10;                android:id=&quot;@+id/textDiscountAmount&quot;&#10;                android:layout_width=&quot;wrap_content&quot;&#10;                android:layout_height=&quot;wrap_content&quot;&#10;                android:text=&quot;R 250.00&quot;&#10;                android:textSize=&quot;12sp&quot;&#10;                android:textStyle=&quot;bold&quot;&#10;                android:textColor=&quot;@color/white&quot;/&gt;&#10;&#10;        &lt;/LinearLayout&gt;&#10;&#10;        &lt;TextView&#10;            android:id=&quot;@+id/textNotes&quot;&#10;            android:layout_width=&quot;wrap_content&quot;&#10;            android:layout_height=&quot;wrap_content&quot;&#10;            android:text=&quot;Notes&quot;&#10;            android:textSize=&quot;14sp&quot;&#10;            android:textColor=&quot;@color/black&quot;&#10;            android:layout_marginTop=&quot;4dp&quot;/&gt;&#10;    &lt;/LinearLayout&gt;&#10;&lt;/androidx.cardview.widget.CardView&gt;&#10;" />
              <option name="updatedContent" value="&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;&#10;&lt;androidx.cardview.widget.CardView xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;&#10;    xmlns:app=&quot;http://schemas.android.com/apk/res-auto&quot;&#10;    android:layout_width=&quot;match_parent&quot;&#10;    android:layout_height=&quot;wrap_content&quot;&#10;    android:layout_marginBottom=&quot;12dp&quot;&#10;    app:cardCornerRadius=&quot;12dp&quot;&#10;    app:cardElevation=&quot;4dp&quot;&gt;&#10;&#10;    &lt;LinearLayout&#10;        android:layout_width=&quot;match_parent&quot;&#10;        android:layout_height=&quot;wrap_content&quot;&#10;        android:orientation=&quot;vertical&quot;&#10;        android:padding=&quot;16dp&quot;&gt;&#10;&#10;        &lt;TextView&#10;            android:id=&quot;@+id/textDestination&quot;&#10;            android:layout_width=&quot;wrap_content&quot;&#10;            android:layout_height=&quot;wrap_content&quot;&#10;            android:text=&quot;Destination&quot;&#10;            android:textStyle=&quot;bold&quot;&#10;            android:textSize=&quot;18sp&quot;&#10;            android:textColor=&quot;@color/black&quot;/&gt;&#10;&#10;        &lt;TextView&#10;            android:id=&quot;@+id/textDates&quot;&#10;            android:layout_width=&quot;wrap_content&quot;&#10;            android:layout_height=&quot;wrap_content&quot;&#10;            android:text=&quot;Dates&quot;&#10;            android:textSize=&quot;14sp&quot;&#10;            android:textColor=&quot;@color/black&quot;&#10;            android:layout_marginTop=&quot;4dp&quot;/&gt;&#10;&#10;        &lt;TextView&#10;            android:id=&quot;@+id/textActivities&quot;&#10;            android:layout_width=&quot;wrap_content&quot;&#10;            android:layout_height=&quot;wrap_content&quot;&#10;            android:text=&quot;Activities&quot;&#10;            android:textSize=&quot;14sp&quot;&#10;            android:textColor=&quot;@color/black&quot;&#10;            android:layout_marginTop=&quot;4dp&quot;/&gt;&#10;&#10;        &lt;TextView&#10;            android:id=&quot;@+id/textExpenses&quot;&#10;            android:layout_width=&quot;wrap_content&quot;&#10;            android:layout_height=&quot;wrap_content&quot;&#10;            android:text=&quot;Expenses&quot;&#10;            android:textSize=&quot;14sp&quot;&#10;            android:textColor=&quot;@color/black&quot;&#10;            android:layout_marginTop=&quot;4dp&quot;/&gt;&#10;&#10;        &lt;!-- Discount Information Section --&gt;&#10;        &lt;LinearLayout&#10;            android:id=&quot;@+id/layoutDiscount&quot;&#10;            android:layout_width=&quot;match_parent&quot;&#10;            android:layout_height=&quot;wrap_content&quot;&#10;            android:orientation=&quot;horizontal&quot;&#10;            android:layout_marginTop=&quot;6dp&quot;&#10;            android:padding=&quot;8dp&quot;&#10;            android:background=&quot;@drawable/button_shape&quot;&#10;            android:visibility=&quot;gone&quot;&gt;&#10;&#10;            &lt;TextView&#10;                android:layout_width=&quot;wrap_content&quot;&#10;                android:layout_height=&quot;wrap_content&quot;&#10;                android:text=&quot;&quot;&#10;                android:textSize=&quot;16sp&quot;&#10;                android:layout_marginEnd=&quot;8dp&quot;/&gt;&#10;&#10;            &lt;TextView&#10;                android:id=&quot;@+id/textDiscount&quot;&#10;                android:layout_width=&quot;0dp&quot;&#10;                android:layout_height=&quot;wrap_content&quot;&#10;                android:layout_weight=&quot;1&quot;&#10;                android:text=&quot;10% Discount Applied!&quot;&#10;                android:textSize=&quot;12sp&quot;&#10;                android:textStyle=&quot;bold&quot;&#10;                android:textColor=&quot;@color/white&quot;/&gt;&#10;&#10;            &lt;TextView&#10;                android:id=&quot;@+id/textDiscountAmount&quot;&#10;                android:layout_width=&quot;wrap_content&quot;&#10;                android:layout_height=&quot;wrap_content&quot;&#10;                android:text=&quot;R 250.00&quot;&#10;                android:textSize=&quot;12sp&quot;&#10;                android:textStyle=&quot;bold&quot;&#10;                android:textColor=&quot;@color/white&quot;/&gt;&#10;&#10;        &lt;/LinearLayout&gt;&#10;&#10;        &lt;TextView&#10;            android:id=&quot;@+id/textNotes&quot;&#10;            android:layout_width=&quot;wrap_content&quot;&#10;            android:layout_height=&quot;wrap_content&quot;&#10;            android:text=&quot;Notes&quot;&#10;            android:textSize=&quot;14sp&quot;&#10;            android:textColor=&quot;@color/black&quot;&#10;            android:layout_marginTop=&quot;4dp&quot;/&gt;&#10;    &lt;/LinearLayout&gt;&#10;&lt;/androidx.cardview.widget.CardView&gt;" />
            </PendingDiffInfo>
          </value>
        </entry>
      </map>
    </option>
  </component>
</project>