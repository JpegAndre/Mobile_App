<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="CopilotDiffPersistence">
    <option name="pendingDiffs">
      <map>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/example/tripbuddy/ui/trip/TripFragment.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/example/tripbuddy/ui/trip/TripFragment.java" />
              <option name="originalContent" value="package com.example.tripbuddy.ui.trip;&#10;&#10;import com.example.tripbuddy.R;&#10;import com.google.android.material.datepicker.MaterialDatePicker;&#10;import com.google.android.material.textfield.TextInputEditText;&#10;import com.google.android.material.textfield.TextInputLayout;&#10;import com.example.tripbuddy.MainActivity;&#10;&#10;import android.os.Bundle;&#10;&#10;import androidx.annotation.NonNull;&#10;import androidx.annotation.Nullable;&#10;import androidx.core.graphics.Insets;&#10;import androidx.core.view.ViewCompat;&#10;import androidx.core.view.WindowInsetsCompat;&#10;import androidx.fragment.app.Fragment;&#10;&#10;import android.view.LayoutInflater;&#10;import android.view.View;&#10;import android.view.ViewGroup;&#10;import android.widget.Button;&#10;import android.widget.CheckBox;&#10;import android.widget.RadioGroup;&#10;import android.widget.TextView;&#10;&#10;import java.text.SimpleDateFormat;&#10;import java.util.ArrayList;&#10;import java.util.Date;&#10;import java.util.Locale;&#10;&#10;public class TripFragment extends Fragment {&#10;&#10;    private TextInputEditText startEditText, endEditText, destinationEditText, notesEditText, travelExEditText, customExEditText, mealExEditText;&#10;    private TextInputLayout startInputLayout, endInputLayout, destinationInputLayout, notesInputLayout, travelExInputLayout, customExInputLayout, mealExInputLayout;&#10;&#10;    private Button calculateButton, saveButton;&#10;&#10;    private TextView resultTextView;&#10;&#10;    private CheckBox hiking, bus, sightseeing, museum;&#10;&#10;    private String destination, notes;&#10;&#10;    private View scrollView;&#10;&#10;    private double travelExpenses, customExpenses, mealExpenses, totalExpenses, activitiesExpenses;&#10;&#10;    private SimpleDateFormat startDate, endDate;&#10;&#10;    ArrayList&lt;String&gt; activities = new ArrayList&lt;&gt;();&#10;&#10;&#10;    @Override&#10;    public View onCreateView(@NonNull LayoutInflater inflater, @Nullable ViewGroup container,&#10;                             @Nullable Bundle savedInstanceState) {&#10;        return inflater.inflate(R.layout.fragment_trip, container, false);&#10;    }&#10;&#10;    @Override&#10;    public void onViewCreated(@NonNull View view, @Nullable Bundle savedInstanceState) {&#10;        super.onViewCreated(view, savedInstanceState);&#10;&#10;        startEditText = view.findViewById(R.id.edtDateStart);&#10;        endEditText = view.findViewById(R.id.edtDateEnd);&#10;        startInputLayout = view.findViewById(R.id.inputLayoutDateStart);&#10;        endInputLayout = view.findViewById(R.id.inputLayoutDateEnd);&#10;        scrollView = view.findViewById(R.id.scrollView);&#10;        destinationEditText = view.findViewById(R.id.edtDestination);&#10;        destinationInputLayout = view.findViewById(R.id.inputLayoutDestination);&#10;        notesEditText = view.findViewById(R.id.edtNotes);&#10;        notesInputLayout = view.findViewById(R.id.inputLayoutNotes);&#10;        travelExEditText = view.findViewById(R.id.edtTripExpenses);&#10;        travelExInputLayout = view.findViewById(R.id.inputLayoutTravelExpenses);&#10;        customExEditText = view.findViewById(R.id.edtCustomExpenses);&#10;        customExInputLayout = view.findViewById(R.id.inputLayoutCustomExpenses);&#10;        mealExEditText = view.findViewById(R.id.edtMealExpenses);&#10;        mealExInputLayout = view.findViewById(R.id.inputLayoutMealExpenses);&#10;        calculateButton = view.findViewById(R.id.btnCalculate);&#10;        saveButton = view.findViewById(R.id.btnSubmit);&#10;        resultTextView = view.findViewById(R.id.textEstimates);&#10;        hiking = view.findViewById(R.id.checkHiking);&#10;        bus = view.findViewById(R.id.checkBus);&#10;        sightseeing = view.findViewById(R.id.checkSightseeing);&#10;        museum = view.findViewById(R.id.checkMuseum);&#10;&#10;&#10;&#10;        calculateButton.setOnClickListener(new View.OnClickListener() {&#10;            @Override&#10;            public void onClick(View v) {&#10;&#10;                boolean isValid = true;&#10;                totalExpenses = 0;&#10;                activitiesExpenses = 0;&#10;&#10;                // Validate Start Date&#10;                if (startEditText.getText() == null || startEditText.getText().toString().isEmpty()) {&#10;                    startInputLayout.setError(&quot;Start date cannot be empty&quot;);&#10;                    isValid = false;&#10;                    return;&#10;                } else {&#10;                    startInputLayout.setError(null);&#10;                    startInputLayout.setErrorEnabled(false);&#10;                }&#10;&#10;                // Validate End Date&#10;                if (endEditText.getText() == null || endEditText.getText().toString().isEmpty()) {&#10;                    endInputLayout.setError(&quot;End date cannot be empty&quot;);&#10;                    isValid = false;&#10;                } else {&#10;                    endInputLayout.setError(null);&#10;                    endInputLayout.setErrorEnabled(false);&#10;                }&#10;                // Validate Destination&#10;                if (destinationEditText.getText() == null || destinationEditText.getText().toString().isEmpty()) {&#10;                    destinationInputLayout.setError(&quot;Destination cannot be empty&quot;);&#10;                    isValid = false;&#10;                } else {&#10;                    destination = destinationEditText.getText().toString();&#10;                    destinationInputLayout.setError(null);&#10;                    destinationInputLayout.setErrorEnabled(false);&#10;                }&#10;                // Validate Notes&#10;                if (notesEditText.getText() == null || notesEditText.getText().toString().isEmpty()) {&#10;                    notesInputLayout.setError(&quot;Notes cannot be empty&quot;);&#10;                    isValid = false;&#10;                } else {&#10;                    notes = notesEditText.getText().toString();&#10;                    notesInputLayout.setError(null);&#10;                    notesInputLayout.setErrorEnabled(false);&#10;                }&#10;                // Validate Travel Expenses&#10;                String travelEx = travelExEditText.getText() != null ? travelExEditText.getText().toString() : &quot;&quot;;&#10;                if (travelEx.isEmpty()) {&#10;                    travelExInputLayout.setError(&quot;Travel expenses cannot be empty&quot;);&#10;                    isValid = false;&#10;                } else {&#10;                    try {&#10;                        travelExpenses = Double.parseDouble(travelEx);&#10;                        travelExInputLayout.setError(null);&#10;                        travelExInputLayout.setErrorEnabled(false);&#10;                    } catch (NumberFormatException e) {&#10;                        travelExInputLayout.setError(&quot;Enter a valid number&quot;);&#10;                        isValid = false;&#10;                    }&#10;                }&#10;&#10;                // Validate Custom Expenses&#10;                String customEx = customExEditText.getText() != null ? customExEditText.getText().toString() : &quot;&quot;;&#10;                if (customEx.isEmpty()) {&#10;                    customExInputLayout.setError(&quot;Custom expenses cannot be empty&quot;);&#10;                    isValid = false;&#10;                } else {&#10;                    try {&#10;                        customExpenses = Double.parseDouble(customEx);&#10;                        customExInputLayout.setError(null);&#10;                        customExInputLayout.setErrorEnabled(false);&#10;                    } catch (NumberFormatException e) {&#10;                        customExInputLayout.setError(&quot;Enter a valid number&quot;);&#10;                        isValid = false;&#10;                    }&#10;                }&#10;                // Validate Meal Expenses&#10;                String mealEx = mealExEditText.getText() != null ? mealExEditText.getText().toString() : &quot;&quot;;&#10;                if (mealEx.isEmpty()) {&#10;                    mealExInputLayout.setError(&quot;Meal expenses cannot be empty&quot;);&#10;                    isValid = false;&#10;                } else {&#10;                    try {&#10;                        mealExpenses = Double.parseDouble(mealEx);&#10;                        mealExInputLayout.setError(null);&#10;                        mealExInputLayout.setErrorEnabled(false);&#10;                    } catch (NumberFormatException e) {&#10;                        mealExInputLayout.setError(&quot;Enter a valid number&quot;);&#10;                        isValid = false;&#10;                    }&#10;                }&#10;&#10;                // If all fields are valid, proceed with calculation logic&#10;                if (isValid) {&#10;                    totalExpenses = travelExpenses + customExpenses + mealExpenses;&#10;&#10;                    if (hiking.isChecked()) {&#10;                        activities.add(&quot;Hiking&quot;);&#10;                        activitiesExpenses += 450;&#10;                    }&#10;                    if (bus.isChecked()) {&#10;                        activities.add(&quot;Bus&quot;);&#10;                        activitiesExpenses += 500;&#10;                    }&#10;                    if (sightseeing.isChecked()) {&#10;                        activities.add(&quot;Sightseeing&quot;);&#10;                        activitiesExpenses += 2500;&#10;                    }&#10;                    if (museum.isChecked()) {&#10;                        activities.add(&quot;Museum&quot;);&#10;                        activitiesExpenses += 150;&#10;                    }&#10;&#10;                    totalExpenses += activitiesExpenses;&#10;&#10;                    String temp = &quot;Travel expenses - R &quot; + travelExpenses + &quot;\nActivity expenses - R &quot; + activitiesExpenses + &quot;\nCustom expenses - R &quot; + customExpenses + &quot;\nMeal expenses - R &quot; + mealExpenses + &quot;\n-----------------------\nTotal expenses - R &quot; + totalExpenses;&#10;&#10;                    resultTextView.setText(temp);&#10;&#10;                    saveButton.setEnabled(true);&#10;                }&#10;            }&#10;        });&#10;&#10;//        saveButton.setOnClickListener(v -&gt; {&#10;//            // Save trip details to SharedPreferences&#10;//            if (getActivity() != null) {&#10;//                MainActivity activity = (MainActivity) getActivity();&#10;//                activity.saveTripDetails(&#10;//                        startEditText.getText().toString(),&#10;//                        endEditText.getText().toString(),&#10;//                        destination,&#10;//                        notes,&#10;//                        travelExpenses,&#10;//                        customExpenses,&#10;//                        mealExpenses,&#10;//                        activities,&#10;//                        totalExpenses&#10;//                );&#10;//                saveButton.setEnabled(false);&#10;//            }&#10;//        });&#10;&#10;        startEditText.setOnClickListener(v -&gt; {&#10;            MaterialDatePicker&lt;Long&gt; startDatePicker = MaterialDatePicker.Builder.datePicker()&#10;                    .setTitleText(&quot;Select start date&quot;)&#10;                    .setSelection(MaterialDatePicker.todayInUtcMilliseconds())&#10;                    .build();&#10;            startDatePicker.show(getParentFragmentManager(), &quot;START_DATE_PICKER&quot;);&#10;            startDatePicker.addOnPositiveButtonClickListener(selection -&gt;&#10;                startEditText.setText(new SimpleDateFormat(&quot;dd/MM/yyyy&quot;, Locale.getDefault()).format(new Date((Long) selection)))&#10;            );&#10;&#10;            startDate = new SimpleDateFormat(&quot;dd/MM/yyyy&quot;, Locale.getDefault());&#10;        });&#10;&#10;        endEditText.setOnClickListener(v -&gt; {&#10;            MaterialDatePicker&lt;Long&gt; endDatePicker = MaterialDatePicker.Builder.datePicker()&#10;                    .setTitleText(&quot;Select end date&quot;)&#10;                    .setSelection(MaterialDatePicker.todayInUtcMilliseconds())&#10;                    .build();&#10;            endDatePicker.show(getParentFragmentManager(), &quot;END_DATE_PICKER&quot;);&#10;            endDatePicker.addOnPositiveButtonClickListener(selection -&gt;&#10;                endEditText.setText(new SimpleDateFormat(&quot;dd/MM/yyyy&quot;, Locale.getDefault()).format(new Date((Long) selection)))&#10;            );&#10;&#10;            endDate = new SimpleDateFormat(&quot;dd/MM/yyyy&quot;, Locale.getDefault());&#10;        });&#10;&#10;//        ViewCompat.setOnApplyWindowInsetsListener(scrollView, (v, insets) -&gt; {&#10;//            Insets navBarInsets = insets.getInsets(WindowInsetsCompat.Type.systemBars());&#10;//            v.setPadding(0, 0, 0, navBarInsets.bottom);&#10;//            return insets;&#10;//        });&#10;&#10;&#10;        // Only use TextWatcher for immediate feedback&#10;        android.text.TextWatcher disableSaveTextWatcher = new android.text.TextWatcher() {&#10;            @Override&#10;            public void beforeTextChanged(CharSequence s, int start, int count, int after) {}&#10;            @Override&#10;            public void onTextChanged(CharSequence s, int start, int before, int count) {&#10;                saveButton.setEnabled(false);&#10;            }&#10;            @Override&#10;            public void afterTextChanged(android.text.Editable s) {}&#10;        };&#10;        startEditText.addTextChangedListener(disableSaveTextWatcher);&#10;        endEditText.addTextChangedListener(disableSaveTextWatcher);&#10;        destinationEditText.addTextChangedListener(disableSaveTextWatcher);&#10;        notesEditText.addTextChangedListener(disableSaveTextWatcher);&#10;        travelExEditText.addTextChangedListener(disableSaveTextWatcher);&#10;        customExEditText.addTextChangedListener(disableSaveTextWatcher);&#10;        mealExEditText.addTextChangedListener(disableSaveTextWatcher);&#10;    }&#10;&#10;}" />
              <option name="updatedContent" value="package com.example.tripbuddy.ui.trip;&#10;&#10;import com.example.tripbuddy.R;&#10;import com.google.android.material.datepicker.MaterialDatePicker;&#10;import com.google.android.material.textfield.TextInputEditText;&#10;import com.google.android.material.textfield.TextInputLayout;&#10;import com.example.tripbuddy.MainActivity;&#10;&#10;import android.os.Bundle;&#10;&#10;import androidx.annotation.NonNull;&#10;import androidx.annotation.Nullable;&#10;import androidx.core.graphics.Insets;&#10;import androidx.core.view.ViewCompat;&#10;import androidx.core.view.WindowInsetsCompat;&#10;import androidx.fragment.app.Fragment;&#10;&#10;import android.view.LayoutInflater;&#10;import android.view.View;&#10;import android.view.ViewGroup;&#10;import android.widget.Button;&#10;import android.widget.CheckBox;&#10;import android.widget.RadioGroup;&#10;import android.widget.TextView;&#10;&#10;import java.text.SimpleDateFormat;&#10;import java.util.ArrayList;&#10;import java.util.Date;&#10;import java.util.Locale;&#10;&#10;public class TripFragment extends Fragment {&#10;&#10;    private TextInputEditText startEditText, endEditText, destinationEditText, notesEditText, travelExEditText, customExEditText, mealExEditText;&#10;    private TextInputLayout startInputLayout, endInputLayout, destinationInputLayout, notesInputLayout, travelExInputLayout, customExInputLayout, mealExInputLayout;&#10;&#10;    private Button calculateButton, saveButton;&#10;&#10;    private TextView resultTextView;&#10;&#10;    private CheckBox hiking, bus, sightseeing, museum;&#10;&#10;    private String destination, notes;&#10;&#10;    private View scrollView;&#10;&#10;    private double travelExpenses, customExpenses, mealExpenses, totalExpenses, activitiesExpenses;&#10;&#10;    private SimpleDateFormat startDate, endDate;&#10;&#10;    ArrayList&lt;String&gt; activities = new ArrayList&lt;&gt;();&#10;&#10;&#10;    @Override&#10;    public View onCreateView(@NonNull LayoutInflater inflater, @Nullable ViewGroup container,&#10;                             @Nullable Bundle savedInstanceState) {&#10;        return inflater.inflate(R.layout.fragment_trip, container, false);&#10;    }&#10;&#10;    @Override&#10;    public void onViewCreated(@NonNull View view, @Nullable Bundle savedInstanceState) {&#10;        super.onViewCreated(view, savedInstanceState);&#10;&#10;        startEditText = view.findViewById(R.id.edtDateStart);&#10;        endEditText = view.findViewById(R.id.edtDateEnd);&#10;        startInputLayout = view.findViewById(R.id.inputLayoutDateStart);&#10;        endInputLayout = view.findViewById(R.id.inputLayoutDateEnd);&#10;        scrollView = view.findViewById(R.id.scrollView);&#10;        destinationEditText = view.findViewById(R.id.edtDestination);&#10;        destinationInputLayout = view.findViewById(R.id.inputLayoutDestination);&#10;        notesEditText = view.findViewById(R.id.edtNotes);&#10;        notesInputLayout = view.findViewById(R.id.inputLayoutNotes);&#10;        travelExEditText = view.findViewById(R.id.edtTripExpenses);&#10;        travelExInputLayout = view.findViewById(R.id.inputLayoutTravelExpenses);&#10;        customExEditText = view.findViewById(R.id.edtCustomExpenses);&#10;        customExInputLayout = view.findViewById(R.id.inputLayoutCustomExpenses);&#10;        mealExEditText = view.findViewById(R.id.edtMealExpenses);&#10;        mealExInputLayout = view.findViewById(R.id.inputLayoutMealExpenses);&#10;        calculateButton = view.findViewById(R.id.btnCalculate);&#10;        saveButton = view.findViewById(R.id.btnSubmit);&#10;        resultTextView = view.findViewById(R.id.textEstimates);&#10;        hiking = view.findViewById(R.id.checkHiking);&#10;        bus = view.findViewById(R.id.checkBus);&#10;        sightseeing = view.findViewById(R.id.checkSightseeing);&#10;        museum = view.findViewById(R.id.checkMuseum);&#10;&#10;&#10;&#10;        calculateButton.setOnClickListener(new View.OnClickListener() {&#10;            @Override&#10;            public void onClick(View v) {&#10;&#10;                boolean isValid = true;&#10;                totalExpenses = 0;&#10;                activitiesExpenses = 0;&#10;&#10;                // Validate Start Date&#10;                if (startEditText.getText() == null || startEditText.getText().toString().isEmpty()) {&#10;                    startInputLayout.setError(&quot;Start date cannot be empty&quot;);&#10;                    isValid = false;&#10;                    return;&#10;                } else {&#10;                    startInputLayout.setError(null);&#10;                    startInputLayout.setErrorEnabled(false);&#10;                }&#10;&#10;                // Validate End Date&#10;                if (endEditText.getText() == null || endEditText.getText().toString().isEmpty()) {&#10;                    endInputLayout.setError(&quot;End date cannot be empty&quot;);&#10;                    isValid = false;&#10;                } else {&#10;                    endInputLayout.setError(null);&#10;                    endInputLayout.setErrorEnabled(false);&#10;                }&#10;                // Validate Destination&#10;                if (destinationEditText.getText() == null || destinationEditText.getText().toString().isEmpty()) {&#10;                    destinationInputLayout.setError(&quot;Destination cannot be empty&quot;);&#10;                    isValid = false;&#10;                } else {&#10;                    destination = destinationEditText.getText().toString();&#10;                    destinationInputLayout.setError(null);&#10;                    destinationInputLayout.setErrorEnabled(false);&#10;                }&#10;                // Validate Notes&#10;                if (notesEditText.getText() == null || notesEditText.getText().toString().isEmpty()) {&#10;                    notesInputLayout.setError(&quot;Notes cannot be empty&quot;);&#10;                    isValid = false;&#10;                } else {&#10;                    notes = notesEditText.getText().toString();&#10;                    notesInputLayout.setError(null);&#10;                    notesInputLayout.setErrorEnabled(false);&#10;                }&#10;                // Validate Travel Expenses&#10;                String travelEx = travelExEditText.getText() != null ? travelExEditText.getText().toString() : &quot;&quot;;&#10;                if (travelEx.isEmpty()) {&#10;                    travelExInputLayout.setError(&quot;Travel expenses cannot be empty&quot;);&#10;                    isValid = false;&#10;                } else {&#10;                    try {&#10;                        travelExpenses = Double.parseDouble(travelEx);&#10;                        travelExInputLayout.setError(null);&#10;                        travelExInputLayout.setErrorEnabled(false);&#10;                    } catch (NumberFormatException e) {&#10;                        travelExInputLayout.setError(&quot;Enter a valid number&quot;);&#10;                        isValid = false;&#10;                    }&#10;                }&#10;&#10;                // Validate Custom Expenses&#10;                String customEx = customExEditText.getText() != null ? customExEditText.getText().toString() : &quot;&quot;;&#10;                if (customEx.isEmpty()) {&#10;                    customExInputLayout.setError(&quot;Custom expenses cannot be empty&quot;);&#10;                    isValid = false;&#10;                } else {&#10;                    try {&#10;                        customExpenses = Double.parseDouble(customEx);&#10;                        customExInputLayout.setError(null);&#10;                        customExInputLayout.setErrorEnabled(false);&#10;                    } catch (NumberFormatException e) {&#10;                        customExInputLayout.setError(&quot;Enter a valid number&quot;);&#10;                        isValid = false;&#10;                    }&#10;                }&#10;                // Validate Meal Expenses&#10;                String mealEx = mealExEditText.getText() != null ? mealExEditText.getText().toString() : &quot;&quot;;&#10;                if (mealEx.isEmpty()) {&#10;                    mealExInputLayout.setError(&quot;Meal expenses cannot be empty&quot;);&#10;                    isValid = false;&#10;                } else {&#10;                    try {&#10;                        mealExpenses = Double.parseDouble(mealEx);&#10;                        mealExInputLayout.setError(null);&#10;                        mealExInputLayout.setErrorEnabled(false);&#10;                    } catch (NumberFormatException e) {&#10;                        mealExInputLayout.setError(&quot;Enter a valid number&quot;);&#10;                        isValid = false;&#10;                    }&#10;                }&#10;&#10;                // If all fields are valid, proceed with calculation logic&#10;                if (isValid) {&#10;                    totalExpenses = travelExpenses + customExpenses + mealExpenses;&#10;&#10;                    if (hiking.isChecked()) {&#10;                        activities.add(&quot;Hiking&quot;);&#10;                        activitiesExpenses += 450;&#10;                    }&#10;                    if (bus.isChecked()) {&#10;                        activities.add(&quot;Bus&quot;);&#10;                        activitiesExpenses += 500;&#10;                    }&#10;                    if (sightseeing.isChecked()) {&#10;                        activities.add(&quot;Sightseeing&quot;);&#10;                        activitiesExpenses += 2500;&#10;                    }&#10;                    if (museum.isChecked()) {&#10;                        activities.add(&quot;Museum&quot;);&#10;                        activitiesExpenses += 150;&#10;                    }&#10;&#10;                    totalExpenses += activitiesExpenses;&#10;&#10;                    String temp = &quot;Travel expenses - R &quot; + travelExpenses + &quot;\nActivity expenses - R &quot; + activitiesExpenses + &quot;\nCustom expenses - R &quot; + customExpenses + &quot;\nMeal expenses - R &quot; + mealExpenses + &quot;\n-----------------------\nTotal expenses - R &quot; + totalExpenses;&#10;&#10;                    resultTextView.setText(temp);&#10;&#10;                    saveButton.setEnabled(true);&#10;                }&#10;            }&#10;        });&#10;&#10;//        saveButton.setOnClickListener(v -&gt; {&#10;//            // Save trip details to SharedPreferences&#10;//            if (getActivity() != null) {&#10;//                MainActivity activity = (MainActivity) getActivity();&#10;//                activity.saveTripDetails(&#10;//                        startEditText.getText().toString(),&#10;//                        endEditText.getText().toString(),&#10;//                        destination,&#10;//                        notes,&#10;//                        travelExpenses,&#10;//                        customExpenses,&#10;//                        mealExpenses,&#10;//                        activities,&#10;//                        totalExpenses&#10;//                );&#10;//                saveButton.setEnabled(false);&#10;//            }&#10;//        });&#10;&#10;        startEditText.setOnClickListener(v -&gt; {&#10;            MaterialDatePicker&lt;Long&gt; startDatePicker = MaterialDatePicker.Builder.datePicker()&#10;                    .setTitleText(&quot;Select start date&quot;)&#10;                    .setSelection(MaterialDatePicker.todayInUtcMilliseconds())&#10;                    .build();&#10;            startDatePicker.show(getParentFragmentManager(), &quot;START_DATE_PICKER&quot;);&#10;            startDatePicker.addOnPositiveButtonClickListener(selection -&gt;&#10;                startEditText.setText(new SimpleDateFormat(&quot;dd/MM/yyyy&quot;, Locale.getDefault()).format(new Date((Long) selection)))&#10;            );&#10;&#10;            startDate = new SimpleDateFormat(&quot;dd/MM/yyyy&quot;, Locale.getDefault());&#10;        });&#10;&#10;        endEditText.setOnClickListener(v -&gt; {&#10;            MaterialDatePicker&lt;Long&gt; endDatePicker = MaterialDatePicker.Builder.datePicker()&#10;                    .setTitleText(&quot;Select end date&quot;)&#10;                    .setSelection(MaterialDatePicker.todayInUtcMilliseconds())&#10;                    .build();&#10;            endDatePicker.show(getParentFragmentManager(), &quot;END_DATE_PICKER&quot;);&#10;            endDatePicker.addOnPositiveButtonClickListener(selection -&gt;&#10;                endEditText.setText(new SimpleDateFormat(&quot;dd/MM/yyyy&quot;, Locale.getDefault()).format(new Date((Long) selection)))&#10;            );&#10;&#10;            endDate = new SimpleDateFormat(&quot;dd/MM/yyyy&quot;, Locale.getDefault());&#10;        });&#10;&#10;//        ViewCompat.setOnApplyWindowInsetsListener(scrollView, (v, insets) -&gt; {&#10;//            Insets navBarInsets = insets.getInsets(WindowInsetsCompat.Type.systemBars());&#10;//            v.setPadding(0, 0, 0, navBarInsets.bottom);&#10;//            return insets;&#10;//        });&#10;&#10;&#10;        // Only use TextWatcher for immediate feedback&#10;        android.text.TextWatcher disableSaveTextWatcher = new android.text.TextWatcher() {&#10;            @Override&#10;            public void beforeTextChanged(CharSequence s, int start, int count, int after) {}&#10;            @Override&#10;            public void onTextChanged(CharSequence s, int start, int before, int count) {&#10;                saveButton.setEnabled(false);&#10;            }&#10;            @Override&#10;            public void afterTextChanged(android.text.Editable s) {}&#10;        };&#10;        startEditText.addTextChangedListener(disableSaveTextWatcher);&#10;        endEditText.addTextChangedListener(disableSaveTextWatcher);&#10;        destinationEditText.addTextChangedListener(disableSaveTextWatcher);&#10;        notesEditText.addTextChangedListener(disableSaveTextWatcher);&#10;        travelExEditText.addTextChangedListener(disableSaveTextWatcher);&#10;        customExEditText.addTextChangedListener(disableSaveTextWatcher);&#10;        mealExEditText.addTextChangedListener(disableSaveTextWatcher);&#10;    }&#10;&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
      </map>
    </option>
  </component>
</project>